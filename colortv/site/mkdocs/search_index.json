{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to the home of Color's documentation. You'll find tons of information here, topics ranging from navigating through the dashboard to integrating your app with our SDK. If you can't find what you are looking for, click the button in the bottom right corner to chat with our team or email us at support@colortv.com\n\n\nIntroduction\n\n\nQuickstart\n\n\nAdd an Application\n \n\nAd Units\n \n\n\nSDK Setup\n\n\ntvOS SDK\n \n\nUnity tvOS Plugin\n \n\nAndroid TV SDK\n \n\nUnity Android TV Plugin\n\n\nAdding an Application\n\n\nNavigate to the My Applications section in the Publisher Dashboard. To add a new application, click the plus button. \n\n\n\n\nCopy and paste the tvOS, Android TV, or Amazon Fire TV app store URL for your application and all the details of your app will be gathered and displayed. \n\n\nIf you want to integrate a virtual currency from you can configure\u00a0it in the next tab. First enter your virtual currency name and value. The value of your virtual currency should be the amount per $1 e.g. 100 gems, 2 spins, etc. Then choose whether you would like to have a Client Side or Server Side callback and configure either appropriately. \n\n\n\n\nPlacements\n\n\nA placement is a specific time or location in your application where you might want to display Replay content to your users.\n\n\nYou can find out more specifics about placements and how to incorporate them in your app \nhere\n\n\n\n\nIn order to show an ad, you must declare the placement in the ad request inside of your code.\n\n\nAd units\n\n\n\n\nDiscovery Center\n\n\nDiscovery Center amplifies the finite amount of content in the App Store to provide users with an extended amount of app, video, and brand recommendations. The duel functionality of the Discovery Center helps cater to all types of developers by serving as a free-marketplace to increase your app's reach or a tool for monetization. Our discovery platform uses machine learning to deliver the most relevant suggestions to your users in a non-intrusive manner.\n\n\nConfigure the way you want to utilize the Discovery Center for your apps in the My Applications section of the dashboard by selecting the option to join our open-marketplace or integrate your virtual currency to monetize. If you are using the monetization component, you will be notified by the SDK that the transaction was successful and your users will be credited by either client or server side callbacks. \n\n\n\n\nGame Trailer\n\n\nGame Trailer gives users an immersive experience with one of our featured applications. Scroll through the assortment of images to get insight to the gameplay and functionality of the app,  description and app ratings further helps users determine whether the app will appeal to them. The Game Trailer unit also supports showing video before to further enhance the user's experience with the app. \n\n\n\n\nMaximize Revenue\n\n\nIn order to maximize monetization, select both Video and Game Trailer for your placement in the My Applications section. This enables a video preview for the app to play before the Game Trailer screen is displayed.\n\n\n\n\n\n\nBrand Engagement\n\n\nBrand Engagement transcends the normal television branded ad by allowing users to interact and engage with the product. By entering either their phone number or email address, users will be connected to a brand representative to find out more about the specific offer. By entering their email, users will be added to a mailing list for the product to get updates and exclusive offers. Entering their phone number will result in a representative calling within a few minutes to provide more information about the product. Brand Engagement also supports showing video before to further enhance the user's experience with the product. \n\n\n\n\nMaximize Revenue\n\n\nIn order to maximize monetization, select both Video and Brand Engagement for your placement in the My Applications section. This will enable a video preview for the product to play before the Brand Engagement screen is displayed.\n\n\n\n\n\n\nVideo\n\n\nThe Video unit can be employed in a variety of ways, either as a standalone unit or as a supplement to the Game Trailer and Brand Engagement units. Video ranges from 15 seconds to a minute and can be configured in the My Applications section of the dashboard.\n\n\nPlacements\n\n\nPlacements are specific times or locations inside of your app where you can choose to show content to your users. Here is the list of available placements: \n\n\n\n\nDefined Placement Values\n\n\n\n\n\n\nAppLaunch\n\n\nAppResume\n\n\nAppClose\n\n\nMainMenu\n\n\nPause\n\n\nStageOpen\n\n\nStageComplete\n\n\nStageFailed\n\n\nLevelUp\n\n\nBetweenLevels\n\n\nStoreOpen\n\n\nInAppPurchase\n\n\nAbandonInAppPurchase\n\n\nVirtualGoodPurchased\n\n\nUserHighScore\n\n\nOutofGoods\n\n\nOutofEnergy\n\n\nInsufficientCurrency\n\n\nFinishedTutorial\n\n\n\n\nBy setting up placements inside your app, you will have the ability to control what type of ad units are being shown at specific locations in your app in real-time server side. In addition to added control, our machine learning algorithm optimizes the best performing ad units for specific times: Making more relevant content displayed to your users and maximizing revenue for you. It is recommended that you select all ad units to maximize revenue for your placements.\n\n\nPayments\n\n\nPayment information must be filled out before getting paid. Navigate to the Payments section of the dashboard and click on the settings icon above the table to edit or update your payment information. \n\n\nPayments are paid out by either Paypal or a Wire transfer. Contact your account manager if you would like to receive payments by Wire.\n\n\nReferrals\n\n\nPayment information must be filled out before getting paid. Navigate to the Payments section of the dashboard and click on the settings icon above the table to edit or update your payment information. \n\n\nPayments are paid out by either Paypal or a Wire transfer. Contact your account manager if you would like to receive payments by Wire.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#introduction", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/#quickstart", 
            "text": "Add an Application   Ad Units", 
            "title": "Quickstart"
        }, 
        {
            "location": "/#sdk-setup", 
            "text": "tvOS SDK   Unity tvOS Plugin   Android TV SDK   Unity Android TV Plugin", 
            "title": "SDK Setup"
        }, 
        {
            "location": "/#adding-an-application", 
            "text": "Navigate to the My Applications section in the Publisher Dashboard. To add a new application, click the plus button.    Copy and paste the tvOS, Android TV, or Amazon Fire TV app store URL for your application and all the details of your app will be gathered and displayed.   If you want to integrate a virtual currency from you can configure\u00a0it in the next tab. First enter your virtual currency name and value. The value of your virtual currency should be the amount per $1 e.g. 100 gems, 2 spins, etc. Then choose whether you would like to have a Client Side or Server Side callback and configure either appropriately.    Placements  A placement is a specific time or location in your application where you might want to display Replay content to your users.  You can find out more specifics about placements and how to incorporate them in your app  here   In order to show an ad, you must declare the placement in the ad request inside of your code.", 
            "title": "Adding an Application"
        }, 
        {
            "location": "/#ad-units", 
            "text": "", 
            "title": "Ad units"
        }, 
        {
            "location": "/#discovery-center", 
            "text": "Discovery Center amplifies the finite amount of content in the App Store to provide users with an extended amount of app, video, and brand recommendations. The duel functionality of the Discovery Center helps cater to all types of developers by serving as a free-marketplace to increase your app's reach or a tool for monetization. Our discovery platform uses machine learning to deliver the most relevant suggestions to your users in a non-intrusive manner.  Configure the way you want to utilize the Discovery Center for your apps in the My Applications section of the dashboard by selecting the option to join our open-marketplace or integrate your virtual currency to monetize. If you are using the monetization component, you will be notified by the SDK that the transaction was successful and your users will be credited by either client or server side callbacks.", 
            "title": "Discovery Center"
        }, 
        {
            "location": "/#game-trailer", 
            "text": "Game Trailer gives users an immersive experience with one of our featured applications. Scroll through the assortment of images to get insight to the gameplay and functionality of the app,  description and app ratings further helps users determine whether the app will appeal to them. The Game Trailer unit also supports showing video before to further enhance the user's experience with the app.    Maximize Revenue  In order to maximize monetization, select both Video and Game Trailer for your placement in the My Applications section. This enables a video preview for the app to play before the Game Trailer screen is displayed.", 
            "title": "Game Trailer"
        }, 
        {
            "location": "/#brand-engagement", 
            "text": "Brand Engagement transcends the normal television branded ad by allowing users to interact and engage with the product. By entering either their phone number or email address, users will be connected to a brand representative to find out more about the specific offer. By entering their email, users will be added to a mailing list for the product to get updates and exclusive offers. Entering their phone number will result in a representative calling within a few minutes to provide more information about the product. Brand Engagement also supports showing video before to further enhance the user's experience with the product.    Maximize Revenue  In order to maximize monetization, select both Video and Brand Engagement for your placement in the My Applications section. This will enable a video preview for the product to play before the Brand Engagement screen is displayed.", 
            "title": "Brand Engagement"
        }, 
        {
            "location": "/#video", 
            "text": "The Video unit can be employed in a variety of ways, either as a standalone unit or as a supplement to the Game Trailer and Brand Engagement units. Video ranges from 15 seconds to a minute and can be configured in the My Applications section of the dashboard.", 
            "title": "Video"
        }, 
        {
            "location": "/#placements", 
            "text": "Placements are specific times or locations inside of your app where you can choose to show content to your users. Here is the list of available placements:    Defined Placement Values    AppLaunch  AppResume  AppClose  MainMenu  Pause  StageOpen  StageComplete  StageFailed  LevelUp  BetweenLevels  StoreOpen  InAppPurchase  AbandonInAppPurchase  VirtualGoodPurchased  UserHighScore  OutofGoods  OutofEnergy  InsufficientCurrency  FinishedTutorial   By setting up placements inside your app, you will have the ability to control what type of ad units are being shown at specific locations in your app in real-time server side. In addition to added control, our machine learning algorithm optimizes the best performing ad units for specific times: Making more relevant content displayed to your users and maximizing revenue for you. It is recommended that you select all ad units to maximize revenue for your placements.", 
            "title": "Placements"
        }, 
        {
            "location": "/#payments", 
            "text": "Payment information must be filled out before getting paid. Navigate to the Payments section of the dashboard and click on the settings icon above the table to edit or update your payment information.   Payments are paid out by either Paypal or a Wire transfer. Contact your account manager if you would like to receive payments by Wire.", 
            "title": "Payments"
        }, 
        {
            "location": "/#referrals", 
            "text": "Payment information must be filled out before getting paid. Navigate to the Payments section of the dashboard and click on the settings icon above the table to edit or update your payment information.   Payments are paid out by either Paypal or a Wire transfer. Contact your account manager if you would like to receive payments by Wire.", 
            "title": "Referrals"
        }, 
        {
            "location": "/tvOsSdk/", 
            "text": "Getting Started\n\n\nBefore getting started make sure you have: \n\n\n\n\n\n\nAdded your app in the My Applications section of the Color Dashboard. You need to do this so that you can get your App ID that you'll be adding to your app with our SDK.\n\n\n\n\n\n\nOur newest tvOS SDK supports the newest Xcode (x). Please ensure you are using Xcode (x) or higher to ensure smooth integration.\n\n\n\n\n\n\nAdding tvOS SDK\n\n\nConnecting Your App\n\n\nThere are two ways to add Color to your Xcode project:\n\n\n1) Cocoapods\n\n\nEasily add Color to your project by adding the following code to your Podfile:\n\n\npod \nvalue\n \n\n\n\n\nAfter adding this value, run \npod install\n and the latest version of our tvOS SDk will be installed! Skip to the Initializing SDK section in our guide. \n\n\n\n\ntvOS SDK Download\n\n\nDownoad the tvOS SDK here\n\n\n\n\nDownload \n Unzip SDK\n\n\nDrag and drop the RPLTAdFramework.framework directory into Xcode under \nFrameworks\n.\nOpen your project in Xcode and go to project settings. Select \nGeneral\n and choose proper target, it name in most cases corresponds to name of your project.\n\n\n\n\nExpand \nEmbedded Binaries\n section and click + icon. Add RPLTAdFramework to your project. Please note that the framework will be automatically added to \nLinked Frameworks and Libraries\n. It will \nnot\n happen if you add it to Linked Frameworks and Libraries first.\n\n\nInitializing SDK\n\n\nOpen AppDelegate.m and modify body of function application:DidFinishLaunchingWithOptions:\n\n\n[[RPLTAdController sharedAdController] startWithAppIdentifier:@\n566dbd1a326aeb750132fdfb\n];\n\n\n\n\nRemember to import RPLTAdFramework module. Add following line of code above class implementation.\n\n\n@import RPLTAdFramework;\n\n\n\n\nDisplaying Ads\n\n\nReplay offer lot of different types of advertisement which are automatically provided by our server in\u00a0order to attract you audience. You do not need to care about proper ad and its content. We do it for you. All you need to do is to type a few lines of code to have the ad displayed wherever and whenever you want.\n\n\n[[RPLTAdController sharedAdController] adViewControllerWithCompletion:^(RPLTAdViewController * _Nullable vc, NSError * _Nullable error) {\n        if(vc) {\n\n            vc.adCompleted = ^{\n                dispatch_async(dispatch_get_main_queue(), ^{\n                    [self dismissViewControllerAnimated:YES completion:nil];\n                });\n            };\n\n            dispatch_async(dispatch_get_main_queue(), ^{                \n                [self presentViewController:vc animated:YES completion:^{\n\n                }];\n            });\n        } else {\n            NSLog(@\nError: %@\n, error);\n        }        \n    }];\n\n\n\n\nA few words of explanation are probably required here. We care about user experience a lot. Nobody wants to wait a few seconds just to see an advertisement regardless how attractive its content is. Call a method named adViewControllerWithCompletion whenever you think an ad is likely to be shown. Completion block is called when some elements of ad are loaded.\nIt provides you two arguments, viewController and error. Let's concentrate on the first one. Basically the framework generates viewController which is to be displayed in the manner which matches your application's structure. In most cases modal view controller is OK but sometimes navigation view controller or some kind if embedded view controller will be better. It is up to you.\n\n\nWhen we believe that ad should not longer be displayed you will be informed accordingly. Please define completion block. In the example above that controller is simply dismissed from screen.\n\n\nPlease note that majority of operations are done on the background threads while interactions with User Interface are to be made only on the main thread. Remember to use [NSThread mainThread] (old style) or main queue from GDC (new style) when interacting with UI.\n\n\nEarning Virtual Currency\n\n\nYour audience is more likely to interact with presented ads if something in reward is given. We offer a\u00a0mechanism to provide end user a variety of incentives based on so-called virtual currency. All settings required are to be done in administration panel provided for your application. Your application needs only a few lines of code more to enable features or add some gems to user's collection.\nAds conversion are monitored in background, you will be informed when some currency is assigned. It is up to you whether you prefer to get notification through NSNotificationCenter or use delegate pattern.\n\n\n[[NSNotificationCenter defaultCenter] addObserverForName:RPLTAdFrameworkNotificationDidGetCurrency object:nil queue:nil usingBlock:^(NSNotification * _Nonnull note) {\n        NSLog(@\nuserInfo: %@\n, note);\n    }];\n\n\n\n\nEach time positive conversion is registered (usually when application returns to foreground) notification will be triggered for each conversion separately. Note is an object of class NSNotification which contains property userInfo of class NSDictionary. It contains some useful information like amount of currency to be assigned or name of the currency.\n\n\n@interface AppDelegate ()\nRPLTAdControllerDelegate\n\n\n@end\n\n\n\n\nIf you prefer to use delegates please remember to set desired class as compliant to RPLTAdControllerDelegate protocol. Then set the delegate.\n\n\n[RPLTAdController sharedAdController].delegate = self;\n\n\n\n\nWhenever conversion is registered following method is to be called. Details contains the same information as userInfo.\n\n\n#pragma mark - RPLTAdControllerDelegate\n\n-(void)didGetCurrency:(NSDictionary *)details {\n    NSLog(@\ndidGetcurrency delegate method: %@\n, details);\n}\n\n\n\n\nPlacements\n\n\nYou can inform us about the place in your application user interacts with at the time. It will allow us to target ads more effectively thus you can earn more.\n\n\n[[RPLTAdController sharedAdController] setCurrentPlacement:RPLTAdFrameworkPlacementStageOpen];\n\n\n\n\nThe argument may be any object of class NSString. There is lot of predefined values available as constants whose names start with RPLTAdFrameworkPlacement... .", 
            "title": "TVOS SDK"
        }, 
        {
            "location": "/tvOsSdk/#getting-started", 
            "text": "Before getting started make sure you have:     Added your app in the My Applications section of the Color Dashboard. You need to do this so that you can get your App ID that you'll be adding to your app with our SDK.    Our newest tvOS SDK supports the newest Xcode (x). Please ensure you are using Xcode (x) or higher to ensure smooth integration.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/tvOsSdk/#adding-tvos-sdk", 
            "text": "", 
            "title": "Adding tvOS SDK"
        }, 
        {
            "location": "/tvOsSdk/#connecting-your-app", 
            "text": "There are two ways to add Color to your Xcode project:", 
            "title": "Connecting Your App"
        }, 
        {
            "location": "/tvOsSdk/#1-cocoapods", 
            "text": "Easily add Color to your project by adding the following code to your Podfile:  pod  value    After adding this value, run  pod install  and the latest version of our tvOS SDk will be installed! Skip to the Initializing SDK section in our guide.    tvOS SDK Download  Downoad the tvOS SDK here", 
            "title": "1) Cocoapods"
        }, 
        {
            "location": "/tvOsSdk/#download-unzip-sdk", 
            "text": "Drag and drop the RPLTAdFramework.framework directory into Xcode under  Frameworks .\nOpen your project in Xcode and go to project settings. Select  General  and choose proper target, it name in most cases corresponds to name of your project.   Expand  Embedded Binaries  section and click + icon. Add RPLTAdFramework to your project. Please note that the framework will be automatically added to  Linked Frameworks and Libraries . It will  not  happen if you add it to Linked Frameworks and Libraries first.", 
            "title": "Download &amp; Unzip SDK"
        }, 
        {
            "location": "/tvOsSdk/#initializing-sdk", 
            "text": "Open AppDelegate.m and modify body of function application:DidFinishLaunchingWithOptions:  [[RPLTAdController sharedAdController] startWithAppIdentifier:@ 566dbd1a326aeb750132fdfb ];  Remember to import RPLTAdFramework module. Add following line of code above class implementation.  @import RPLTAdFramework;", 
            "title": "Initializing SDK"
        }, 
        {
            "location": "/tvOsSdk/#displaying-ads", 
            "text": "Replay offer lot of different types of advertisement which are automatically provided by our server in\u00a0order to attract you audience. You do not need to care about proper ad and its content. We do it for you. All you need to do is to type a few lines of code to have the ad displayed wherever and whenever you want.  [[RPLTAdController sharedAdController] adViewControllerWithCompletion:^(RPLTAdViewController * _Nullable vc, NSError * _Nullable error) {\n        if(vc) {\n\n            vc.adCompleted = ^{\n                dispatch_async(dispatch_get_main_queue(), ^{\n                    [self dismissViewControllerAnimated:YES completion:nil];\n                });\n            };\n\n            dispatch_async(dispatch_get_main_queue(), ^{                \n                [self presentViewController:vc animated:YES completion:^{\n\n                }];\n            });\n        } else {\n            NSLog(@ Error: %@ , error);\n        }        \n    }];  A few words of explanation are probably required here. We care about user experience a lot. Nobody wants to wait a few seconds just to see an advertisement regardless how attractive its content is. Call a method named adViewControllerWithCompletion whenever you think an ad is likely to be shown. Completion block is called when some elements of ad are loaded.\nIt provides you two arguments, viewController and error. Let's concentrate on the first one. Basically the framework generates viewController which is to be displayed in the manner which matches your application's structure. In most cases modal view controller is OK but sometimes navigation view controller or some kind if embedded view controller will be better. It is up to you.  When we believe that ad should not longer be displayed you will be informed accordingly. Please define completion block. In the example above that controller is simply dismissed from screen.  Please note that majority of operations are done on the background threads while interactions with User Interface are to be made only on the main thread. Remember to use [NSThread mainThread] (old style) or main queue from GDC (new style) when interacting with UI.", 
            "title": "Displaying Ads"
        }, 
        {
            "location": "/tvOsSdk/#earning-virtual-currency", 
            "text": "Your audience is more likely to interact with presented ads if something in reward is given. We offer a\u00a0mechanism to provide end user a variety of incentives based on so-called virtual currency. All settings required are to be done in administration panel provided for your application. Your application needs only a few lines of code more to enable features or add some gems to user's collection.\nAds conversion are monitored in background, you will be informed when some currency is assigned. It is up to you whether you prefer to get notification through NSNotificationCenter or use delegate pattern.  [[NSNotificationCenter defaultCenter] addObserverForName:RPLTAdFrameworkNotificationDidGetCurrency object:nil queue:nil usingBlock:^(NSNotification * _Nonnull note) {\n        NSLog(@ userInfo: %@ , note);\n    }];  Each time positive conversion is registered (usually when application returns to foreground) notification will be triggered for each conversion separately. Note is an object of class NSNotification which contains property userInfo of class NSDictionary. It contains some useful information like amount of currency to be assigned or name of the currency.  @interface AppDelegate () RPLTAdControllerDelegate \n\n@end  If you prefer to use delegates please remember to set desired class as compliant to RPLTAdControllerDelegate protocol. Then set the delegate.  [RPLTAdController sharedAdController].delegate = self;  Whenever conversion is registered following method is to be called. Details contains the same information as userInfo.  #pragma mark - RPLTAdControllerDelegate\n\n-(void)didGetCurrency:(NSDictionary *)details {\n    NSLog(@ didGetcurrency delegate method: %@ , details);\n}", 
            "title": "Earning Virtual Currency"
        }, 
        {
            "location": "/tvOsSdk/#placements", 
            "text": "You can inform us about the place in your application user interacts with at the time. It will allow us to target ads more effectively thus you can earn more.  [[RPLTAdController sharedAdController] setCurrentPlacement:RPLTAdFrameworkPlacementStageOpen];  The argument may be any object of class NSString. There is lot of predefined values available as constants whose names start with RPLTAdFrameworkPlacement... .", 
            "title": "Placements"
        }, 
        {
            "location": "/unityTVOS/", 
            "text": "Introduction\n\n\nThe ReplayTV Unity Plugin is a light-weight way of including Ads into your games\nand apps from Unity3D using ReplayTV SDK. Currently the plugin works only on\nthe actual device, simulators and Unity Editor will not show ads.\n\n\n\n\nCurrent guide is prepared for Unity 5.3.1f1 version with XCode 7.2.\n\n\n\n\nAdding tvOS Unity Plugin\n\n\n\n\nDownload\n\n\nDownload the Unity tvOS Plugin here\n\n\n\n\nDouble click the ReplayTV.unitypackage file", 
            "title": "UNITY TVOS"
        }, 
        {
            "location": "/unityTVOS/#introduction", 
            "text": "The ReplayTV Unity Plugin is a light-weight way of including Ads into your games\nand apps from Unity3D using ReplayTV SDK. Currently the plugin works only on\nthe actual device, simulators and Unity Editor will not show ads.   Current guide is prepared for Unity 5.3.1f1 version with XCode 7.2.", 
            "title": "Introduction"
        }, 
        {
            "location": "/unityTVOS/#adding-tvos-unity-plugin", 
            "text": "Download  Download the Unity tvOS Plugin here   Double click the ReplayTV.unitypackage file", 
            "title": "Adding tvOS Unity Plugin"
        }, 
        {
            "location": "/androidTVSDK/", 
            "text": "Getting Started\n\n\nBefore getting started make sure you have: \n\n\n\n\n\n\nAdded your app in the My Applications section of the Color Dashboard. You need to do this so that you can get your App ID that you'll be adding to your app with our SDK.\n\n\n\n\n\n\nMake sure your Android Studio version is up to date and that your application is targeting minSdkVersion:21\n\n\n\n\n\n\nAdding Android TV SDK\n\n\nConnecting Your App\n\n\nIn your project \nbuild.gradle\n make sure you are using jcenter repository:\n\n\n    repositories {\n        jcenter()\n    }\n\n\n\n\nThen add the following dependencies in your app \nbuild.gradle\n file in Android Studio: \n\n\ndependencies {\n  compile 'com.replay:android-sdk:0.0.1@aar'\n  compile 'com.google.android.gms:play-services-ads:8.3.0'\n}\n\n\n\n\nDoing this prevents you from having to download our SDK and adding it to your project, as the aar file will handle that for you.\n\n\nInitializing SDK\n\n\nImport the SDK to your MainActivity.java file.\n\n\nimport com.colortv.android.ColorTvSdk;\n\n\n\n\nSetup the ReplaySDK for your app by invoking ReplaySdk initialization method below in your code. \n\n\nColorTvSdk.init(this, \nyour_app_id_from_dashboard\n);\n\n\n\n\n\n\nWe recommend putting the initialization method inside either \nApplication.onCreate()\n or \nMainActivity.onCreate() \n. The application must be initialized before invoking any functions of the SDK.\n\n\n\n\nDisplaying Ads\n\n\nAds may be shown wherever you place them inside your app, but they \nmust\n include a Placement parameter to indicate the specific location. Placements are used to optimize user experience and analytics. \n\n\nPlacements\n\n\nBelow are all the possible placement values: \n- AppLaunch\n- AppResume\n- AppClose\n- MainMenu\n- Pause\n- StageOpen\n- StageComplete\n- StageFailed\n- LevelUp\n- BetweenLevels\n- StoreOpen\n- InAppPurchase\n- AbandonInAppPurchase\n- VirtualGoodPurchased\n- UserHighScore\n- OutofGoods\n- OutofEnergy\n- InsufficientCurrency\n- FinishedTutorial\n\n\n\n\nYou can choose what ad units you want to show for a specific placement in the dashboard, \nclick to learn more about Ad Units\n\n\n\n\nTo get callbacks about the ad status, you need to create a \nColorTvAdListener\n object by overriding it's methods:\n\n\nColorTvAdListener listener = new ColorTvAdListener() {\n\n  @Override\n  public void onAdLoaded(String placement) {\n     ReplaySdk.show(\nchosen_placement\n);\n  }\n\n  @Override\n  public void onAdError(String placement, ColorTvError colorTvError) {\n  }\n\n  @Override\n  public void onAdClosed(String placement) {\n  }\n};\n\n\n\n\nand register that listener to the SDK:\n\n\nColorTvSdk.registerAdListener(listener);\n\n\n\n\nTo load an ad for a certain placement, you need to call the following method:\n\n\nColorTvSdk.loadAd(\nchosen_placement\n);\n\n\n\n\nIt is recommended that you use one of the predefined placements that you can find in \nAdPlacement\n class, e.g. \nAdPlacement.LEVEL_UP\n,  You can also use a custom placement.\n\n\nIn order to show an ad, call the following function: \n\n\nReplaySdk.show(\nchosen_placement\n);\n\n\n\n\n\n\nIt is recommended to set up multiple placements inside your app to maximize monetization and improve user experience.\n\n\n\n\nDeclaring Session\n\n\nCreating a session is \nnecessary\n for tracking virtual currency transactions and user sessions. Add the following code to every Activity file in your application e.g. MainActivity.java\n\n\n// Start Session\n@Override\nprotected void onStart() {\n  super.onStart();\n  ColorTvSdk.onStart();\n}\n\n// End Session\n@Override\nprotected void onStop() {\n  super.onStop();\n  ColorTvSdk.onStop();\n}\n\n\n\n\nEarning Virtual Currency\n\n\nA listener must be added in order to receive events when a virtual currency transaction has occurred. \n\n\nprivate OnCurrencyEarnedListener listener = new OnCurrencyEarnedListener() {\n            @Override\n            public void onCurrencyEarned(int currencyAmount, String currencyType){\n\n            }\n        }\n\n...\n\nColorTvSdk.addOnCurrencyEarnedListener(listener);\n\n\n\n\nUse the following function to unregister listeners:\n\n\nColorTvSdk.removeOnCurrencyEarnedListener(listener);\n\n\n\n\nUse the following function to cancel all listeners: \n\n\nColorTvSdk.clearOnCurrencyEarnedListeners();\n\n\n\n\n\n\nReminder!\n\n\nSession\n must also be implemented for virtual currency transactions to function.\n\n\n\n\nCurrency for user\n\n\nIn order to distribute currency to the same user but on other device, use below:\n\n\nColorTvSdk.setUserId(\nuser123\n);\n\n\n\n\nINSTALL_REFERRER Conflict\n\n\nIf any of your BroadcastReceiver class declared in AndroidManifest.xml contains Intent Action INSTALL_REFERRER:\n\n\nreceiver ...\n\n  \nintent-filter\n\n    \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n/\n\n  \n/intent-filter\n\n\n/receiver\n\n\n\n\nAdd the following code to your AndroidManifest.xml file: \n\n\nreceiver android:name=\ncom.replay.android.ColorTvBroadcastReceiver\n\n\n\n\nIn your BroadcastReceiver that handles action \ncom.android.vending.INSTALL_REFERRER\n, add Java code:\n\n\nif (intent.getAction().equals(\ncom.android.vending.INSTALL_REFERRER\n)) {\n  final String referrer = intent.getStringExtra(\nreferrer\n);\n  ColorTvSdk.registerReferrer(context, referrer);\n}\n\n\n\n\nSummary\n\n\nAfter completing all previous steps your Activity could look like this:\n\n\nimport com.colortv.android.AdPlacement;\nimport com.colortv.android.ColorTvAdListener;\nimport com.colortv.android.ColorTvError;\nimport com.colortv.android.ColorTvSdk;\nimport com.colortv.android.OnCurrencyEarnedListener;\n\npublic class MainActivity extends Activity {\n\n    private ColorTvAdListener listener = new ColorTvAdListener() {\n\n        @Override\n        public void onAdLoaded(String placement) {\n            ColorTvSdk.showAd(placement);\n        }\n\n        @Override\n        public void onAdError(String placement, ColorTvError colorTvError) {\n\n        }\n\n        @Override\n        public void onAdClosed(String placement) {\n        }\n    };\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        ColorTvSdk.setDebugMode(true);\n        ColorTvSdk.init(this, \nyour_app_id\n);\n        ColorTvSdk.registerOnAdStatusChangedListener(listener);\n\n        findViewById(R.id.btnShowAd).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                ColorTvSdk.loadAd(AdPlacement.APP_LAUNCH);\n            }\n        });\n\n        ColorTvSdk.addOnCurrencyEarnedListener(new OnCurrencyEarnedListener() {\n            @Override\n            public void onCurrencyEarned(int currencyAmount, String currencyType) {\n                Toast.makeText(MainActivity.this, \nReceived \n + currencyAmount + \n \n + currencyType, Toast.LENGTH_LONG).show();\n            }\n        });\n    }\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n        ColorTvSdk.onStart();\n    }\n\n    @Override\n    protected void onStop() {\n        super.onStop();\n        ColorTvSdk.onStop();\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n\n        ColorTvSdk.clearOnCurrencyEarnedListeners();\n    }\n}", 
            "title": "ANDROID TV SDK"
        }, 
        {
            "location": "/androidTVSDK/#getting-started", 
            "text": "Before getting started make sure you have:     Added your app in the My Applications section of the Color Dashboard. You need to do this so that you can get your App ID that you'll be adding to your app with our SDK.    Make sure your Android Studio version is up to date and that your application is targeting minSdkVersion:21", 
            "title": "Getting Started"
        }, 
        {
            "location": "/androidTVSDK/#adding-android-tv-sdk", 
            "text": "", 
            "title": "Adding Android TV SDK"
        }, 
        {
            "location": "/androidTVSDK/#connecting-your-app", 
            "text": "In your project  build.gradle  make sure you are using jcenter repository:      repositories {\n        jcenter()\n    }  Then add the following dependencies in your app  build.gradle  file in Android Studio:   dependencies {\n  compile 'com.replay:android-sdk:0.0.1@aar'\n  compile 'com.google.android.gms:play-services-ads:8.3.0'\n}  Doing this prevents you from having to download our SDK and adding it to your project, as the aar file will handle that for you.", 
            "title": "Connecting Your App"
        }, 
        {
            "location": "/androidTVSDK/#initializing-sdk", 
            "text": "Import the SDK to your MainActivity.java file.  import com.colortv.android.ColorTvSdk;  Setup the ReplaySDK for your app by invoking ReplaySdk initialization method below in your code.   ColorTvSdk.init(this,  your_app_id_from_dashboard );   We recommend putting the initialization method inside either  Application.onCreate()  or  MainActivity.onCreate()  . The application must be initialized before invoking any functions of the SDK.", 
            "title": "Initializing SDK"
        }, 
        {
            "location": "/androidTVSDK/#displaying-ads", 
            "text": "Ads may be shown wherever you place them inside your app, but they  must  include a Placement parameter to indicate the specific location. Placements are used to optimize user experience and analytics.", 
            "title": "Displaying Ads"
        }, 
        {
            "location": "/androidTVSDK/#placements", 
            "text": "Below are all the possible placement values: \n- AppLaunch\n- AppResume\n- AppClose\n- MainMenu\n- Pause\n- StageOpen\n- StageComplete\n- StageFailed\n- LevelUp\n- BetweenLevels\n- StoreOpen\n- InAppPurchase\n- AbandonInAppPurchase\n- VirtualGoodPurchased\n- UserHighScore\n- OutofGoods\n- OutofEnergy\n- InsufficientCurrency\n- FinishedTutorial   You can choose what ad units you want to show for a specific placement in the dashboard,  click to learn more about Ad Units   To get callbacks about the ad status, you need to create a  ColorTvAdListener  object by overriding it's methods:  ColorTvAdListener listener = new ColorTvAdListener() {\n\n  @Override\n  public void onAdLoaded(String placement) {\n     ReplaySdk.show( chosen_placement );\n  }\n\n  @Override\n  public void onAdError(String placement, ColorTvError colorTvError) {\n  }\n\n  @Override\n  public void onAdClosed(String placement) {\n  }\n};  and register that listener to the SDK:  ColorTvSdk.registerAdListener(listener);  To load an ad for a certain placement, you need to call the following method:  ColorTvSdk.loadAd( chosen_placement );  It is recommended that you use one of the predefined placements that you can find in  AdPlacement  class, e.g.  AdPlacement.LEVEL_UP ,  You can also use a custom placement.  In order to show an ad, call the following function:   ReplaySdk.show( chosen_placement );   It is recommended to set up multiple placements inside your app to maximize monetization and improve user experience.", 
            "title": "Placements"
        }, 
        {
            "location": "/androidTVSDK/#declaring-session", 
            "text": "Creating a session is  necessary  for tracking virtual currency transactions and user sessions. Add the following code to every Activity file in your application e.g. MainActivity.java  // Start Session\n@Override\nprotected void onStart() {\n  super.onStart();\n  ColorTvSdk.onStart();\n}\n\n// End Session\n@Override\nprotected void onStop() {\n  super.onStop();\n  ColorTvSdk.onStop();\n}", 
            "title": "Declaring Session"
        }, 
        {
            "location": "/androidTVSDK/#earning-virtual-currency", 
            "text": "A listener must be added in order to receive events when a virtual currency transaction has occurred.   private OnCurrencyEarnedListener listener = new OnCurrencyEarnedListener() {\n            @Override\n            public void onCurrencyEarned(int currencyAmount, String currencyType){\n\n            }\n        }\n\n...\n\nColorTvSdk.addOnCurrencyEarnedListener(listener);  Use the following function to unregister listeners:  ColorTvSdk.removeOnCurrencyEarnedListener(listener);  Use the following function to cancel all listeners:   ColorTvSdk.clearOnCurrencyEarnedListeners();   Reminder!  Session  must also be implemented for virtual currency transactions to function.", 
            "title": "Earning Virtual Currency"
        }, 
        {
            "location": "/androidTVSDK/#currency-for-user", 
            "text": "In order to distribute currency to the same user but on other device, use below:  ColorTvSdk.setUserId( user123 );", 
            "title": "Currency for user"
        }, 
        {
            "location": "/androidTVSDK/#install_referrer-conflict", 
            "text": "If any of your BroadcastReceiver class declared in AndroidManifest.xml contains Intent Action INSTALL_REFERRER:  receiver ... \n   intent-filter \n     action android:name= com.android.vending.INSTALL_REFERRER / \n   /intent-filter  /receiver  Add the following code to your AndroidManifest.xml file:   receiver android:name= com.replay.android.ColorTvBroadcastReceiver  In your BroadcastReceiver that handles action  com.android.vending.INSTALL_REFERRER , add Java code:  if (intent.getAction().equals( com.android.vending.INSTALL_REFERRER )) {\n  final String referrer = intent.getStringExtra( referrer );\n  ColorTvSdk.registerReferrer(context, referrer);\n}", 
            "title": "INSTALL_REFERRER Conflict"
        }, 
        {
            "location": "/androidTVSDK/#summary", 
            "text": "After completing all previous steps your Activity could look like this:  import com.colortv.android.AdPlacement;\nimport com.colortv.android.ColorTvAdListener;\nimport com.colortv.android.ColorTvError;\nimport com.colortv.android.ColorTvSdk;\nimport com.colortv.android.OnCurrencyEarnedListener;\n\npublic class MainActivity extends Activity {\n\n    private ColorTvAdListener listener = new ColorTvAdListener() {\n\n        @Override\n        public void onAdLoaded(String placement) {\n            ColorTvSdk.showAd(placement);\n        }\n\n        @Override\n        public void onAdError(String placement, ColorTvError colorTvError) {\n\n        }\n\n        @Override\n        public void onAdClosed(String placement) {\n        }\n    };\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        ColorTvSdk.setDebugMode(true);\n        ColorTvSdk.init(this,  your_app_id );\n        ColorTvSdk.registerOnAdStatusChangedListener(listener);\n\n        findViewById(R.id.btnShowAd).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                ColorTvSdk.loadAd(AdPlacement.APP_LAUNCH);\n            }\n        });\n\n        ColorTvSdk.addOnCurrencyEarnedListener(new OnCurrencyEarnedListener() {\n            @Override\n            public void onCurrencyEarned(int currencyAmount, String currencyType) {\n                Toast.makeText(MainActivity.this,  Received   + currencyAmount +     + currencyType, Toast.LENGTH_LONG).show();\n            }\n        });\n    }\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n        ColorTvSdk.onStart();\n    }\n\n    @Override\n    protected void onStop() {\n        super.onStop();\n        ColorTvSdk.onStop();\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n\n        ColorTvSdk.clearOnCurrencyEarnedListeners();\n    }\n}", 
            "title": "Summary"
        }, 
        {
            "location": "/unityAndroidTV/", 
            "text": "Download Unity Plugin\n\n\nDownload the tvOS SDK here\n\n\n\n\nUnpacking the unitypackage\n\n\nAfter you download the \nReplaySDKUnityPlugin-\nversion\n.unitypackage\n, double click it to unpack it to your project. You will be prompted with a checklist of all the files within the package:\n\n\n\n\nNOTE\n: \nYou may already have the \nandroid-support-v4\n, \nandroid-appcompat-v7\n and \nrecyclerview\n Android libraries in your project. In such case, do not import them.\n\n\nAfter the asset import is finished, copy the \ngoogle-play-services_lib\n from \nANDROID_HOME/extras/google/google_play_services/libproject/\n into your unity project's \nAssets/Plugins/Android/\n folder.\n\n\nMake sure your project has the \nMinimum API Level\n set to \n21\n or higher:\n\n\n\n\nIntegrating the plugin to your game\n\n\nTo integrate our plugin into your game you first need to use the \nReplayPlugin\n namespace in every script that will invoke Replay SDK methods:\n\n\nusing ReplayPlugin;\n\n\n\n\nThen you need to call the \nReplay.Init (\"AppId\")\n method, preferably in your game's first scene's \nStart ()\n method:\n\n\nvoid Start ()\n{\n    Replay.Init (\nAppId\n);\n}\n\n\n\n\nYou can also enable debug mode to receive more verbose logging by calling:\n\n\nReplay.SetDebugMode (true);\n\n\n\n\nTo get callbacks about the ad status, you need to create the following delegates:\n\n\npublic void OnAdLoaded (string placementId)\n{\n  Debug.Log (\nAd is available for placement: \n + placementId);\n}\n\npublic void OnAdClosed (string placementId)\n{\n  Debug.Log (\nAd has been closed for placement: \n + placementId);\n}\n\npublic void OnError (ReplayError error)\n{\n  Debug.Log (\nAd error occured for placement: \n + error.PlacementId + \n, with error code: \n + error.ErrorCode + \n and error message: \n + error.ErrorMessage);\n}\n\n\n\n\nThen you need to register the delegates by using the ReplayCallbacks class members:\n\n\nReplayCallbacks.AdLoaded += OnAdLoaded;\nReplayCallbacks.AdClosed += OnAdClosed;\nReplayCallbacks.AdError += OnError;\n\n\n\n\nTo load an ad for a certain placement, you need to call the following method:\n\n\nReplay.LoadAd (\nad placement\n);\n\n\n\n\nIt is recommended that you use one of the predefined placements that you can find in \nAdPlacement\n class. You can also use a custom placement.\n\n\nTo show an ad for a certain placement, you need to call the following method:\n\n\nReplay.ShowAd (\nad placement\n);\n\n\n\n\nCalling this method will show an ad for the placement you pass. Make sure you get the \nAdLoaded\n callback first, otherwise the ad won't be ready to be played.\n\n\nRegistering currency earned listener\n\n\nIn order to reward the user, you have to create a delegate method in one of your scripts:\n\n\npublic void OnCurrencyEarnedListener (Currency coins)\n{\n  Debug.Log (\nUser has been awarded: \n + coins.Amount + \n x \n + coins.Type);\n}\n\n\n\n\nAnd then register the delegate by calling:\n\n\nReplayCallbacks.CurrencyEarned += OnCurrencyEarnedListener;\n\n\n\n\nNow you will be notified when the user earns virtual currency.", 
            "title": "UNITY ANDROID TV"
        }, 
        {
            "location": "/unityAndroidTV/#unpacking-the-unitypackage", 
            "text": "After you download the  ReplaySDKUnityPlugin- version .unitypackage , double click it to unpack it to your project. You will be prompted with a checklist of all the files within the package:   NOTE :  You may already have the  android-support-v4 ,  android-appcompat-v7  and  recyclerview  Android libraries in your project. In such case, do not import them.  After the asset import is finished, copy the  google-play-services_lib  from  ANDROID_HOME/extras/google/google_play_services/libproject/  into your unity project's  Assets/Plugins/Android/  folder.  Make sure your project has the  Minimum API Level  set to  21  or higher:", 
            "title": "Unpacking the unitypackage"
        }, 
        {
            "location": "/unityAndroidTV/#integrating-the-plugin-to-your-game", 
            "text": "To integrate our plugin into your game you first need to use the  ReplayPlugin  namespace in every script that will invoke Replay SDK methods:  using ReplayPlugin;  Then you need to call the  Replay.Init (\"AppId\")  method, preferably in your game's first scene's  Start ()  method:  void Start ()\n{\n    Replay.Init ( AppId );\n}  You can also enable debug mode to receive more verbose logging by calling:  Replay.SetDebugMode (true);  To get callbacks about the ad status, you need to create the following delegates:  public void OnAdLoaded (string placementId)\n{\n  Debug.Log ( Ad is available for placement:   + placementId);\n}\n\npublic void OnAdClosed (string placementId)\n{\n  Debug.Log ( Ad has been closed for placement:   + placementId);\n}\n\npublic void OnError (ReplayError error)\n{\n  Debug.Log ( Ad error occured for placement:   + error.PlacementId +  , with error code:   + error.ErrorCode +   and error message:   + error.ErrorMessage);\n}  Then you need to register the delegates by using the ReplayCallbacks class members:  ReplayCallbacks.AdLoaded += OnAdLoaded;\nReplayCallbacks.AdClosed += OnAdClosed;\nReplayCallbacks.AdError += OnError;  To load an ad for a certain placement, you need to call the following method:  Replay.LoadAd ( ad placement );  It is recommended that you use one of the predefined placements that you can find in  AdPlacement  class. You can also use a custom placement.  To show an ad for a certain placement, you need to call the following method:  Replay.ShowAd ( ad placement );  Calling this method will show an ad for the placement you pass. Make sure you get the  AdLoaded  callback first, otherwise the ad won't be ready to be played.", 
            "title": "Integrating the plugin to your game"
        }, 
        {
            "location": "/unityAndroidTV/#registering-currency-earned-listener", 
            "text": "In order to reward the user, you have to create a delegate method in one of your scripts:  public void OnCurrencyEarnedListener (Currency coins)\n{\n  Debug.Log ( User has been awarded:   + coins.Amount +   x   + coins.Type);\n}  And then register the delegate by calling:  ReplayCallbacks.CurrencyEarned += OnCurrencyEarnedListener;  Now you will be notified when the user earns virtual currency.", 
            "title": "Registering currency earned listener"
        }
    ]
}