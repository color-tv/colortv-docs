{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to the home of ColorTV's documentation. You'll find topics ranging from navigating around the dashboard to integrating your app with our SDK. If you can't find what you are looking for, click the button in the bottom right corner to chat with our team or email us at support@colortv.com\n\n\nAdding an Application\n\n\nYou can add a new application by clicking the plus button in either the Analytics or My Applications sections. \n\n\n\n\nCopy and paste the tvOS, Android TV, or Amazon Fire TV app store URL for your application and all the details of your app will be displayed. \n\n\n\n\n\n\nIf you want to integrate a virtual currency you can configure\u00a0it in the next tab. First enter your virtual currency name and value. The value of your virtual currency should be the amount per $1 e.g. 100 gems, 2 spins, etc. Then choose whether you would like to have a Client Side or Server Side callback and configure either appropriately. \n\n\nNext you can choose if you would like to join our Open Marketplace. Our Open Marketplace allows you to gain more users and traction to your app by helping promote other apps. The discovery potential of your app is dependant on how well you promote other apps: the more your users download other apps in the marketplace, the more users you will gain!\n\n\n\n\nPlacements\n\n\nA placement is a specific time or location in your application where you might want to display ColorTV content to your users.\n\n\nYou can find out more specifics about placements and how to incorporate them in your app \nhere\n\nIn order to show an ad, you must declare the placement in the ad request inside of your code.\n\n\n\n\nAd units\n\n\n\n\nDiscovery Center\n\n\nDiscovery Center amplifies the finite amount of content in the App Store to provide users with an extended amount of app, video, and brand recommendations. The duel functionality of the Discovery Center helps cater to all types of developers by serving as a free-marketplace to increase your app's reach or a tool for monetization. Our discovery platform uses machine learning to deliver the most relevant suggestions to your users in a non-intrusive manner.\n\n\nConfigure the way you want to utilize the Discovery Center for your apps in the My Applications section of the dashboard by selecting the option to join our open-marketplace or integrate your virtual currency to monetize. If you are using the monetization component, you will be notified by the SDK that the transaction was successful and your users will be credited by either client or server side callbacks. \n\n\n\n\nGame Trailer\n\n\nGame Trailer gives users an immersive experience with one of our featured applications. Scroll through the assortment of images to get insight to the gameplay and functionality of the app,  description and app ratings further helps users determine whether the app will appeal to them. The Game Trailer unit also supports showing video before to further enhance the user's experience with the app. \n\n\n\n\nMaximize Revenue\n\n\nIn order to maximize monetization, select both Video and Game Trailer for your placement in the My Applications section. This enables a video preview for the app to play before the Game Trailer screen is displayed.\n\n\n\n\n\n\nBrand Engagement\n\n\nBrand Engagement transcends the normal television branded ad by allowing users to interact and engage with the product. By entering either their phone number or email address, users will be connected to a brand representative to find out more about the specific offer. By entering their email, users will be added to a mailing list for the product to get updates and exclusive offers. Entering their phone number will result in a representative calling within a few minutes to provide more information about the product. Brand Engagement also supports showing video before to further enhance the user's experience with the product. \n\n\n\n\nMaximize Revenue\n\n\nIn order to maximize monetization, select both Video and Brand Engagement for your placement in the My Applications section. This will enable a video preview for the product to play before the Brand Engagement screen is displayed.\n\n\n\n\n\n\nVideo\n\n\nThe Video unit can be employed in a variety of ways, either as a standalone unit or as a supplement to the Game Trailer and Brand Engagement units. Video ranges from 15 seconds to a minute and can be configured in the My Applications section of the dashboard.\n\n\nPlacements\n\n\nPlacements are specific times or locations inside of your app where you can choose to show content to your users. Here is the list of available placements: \n\n\n\n\nDefined Placement Values\n\n\n\n\n\n\nAppLaunch\n\n\nAppResume\n\n\nAppClose\n\n\nMainMenu\n\n\nPause\n\n\nStageOpen\n\n\nStageComplete\n\n\nStageFailed\n\n\nLevelUp\n\n\nBetweenLevels\n\n\nStoreOpen\n\n\nInAppPurchase\n\n\nAbandonInAppPurchase\n\n\nVirtualGoodPurchased\n\n\nUserHighScore\n\n\nOutofGoods\n\n\nOutofEnergy\n\n\nInsufficientCurrency\n\n\nFinishedTutorial\n\n\n\n\nBy setting up placements inside your app, you will have the ability to control what type of ad units are being shown at specific locations in your app in real-time server side. In addition to added control, our machine learning algorithm optimizes the best performing ad units for specific times: Making more relevant content displayed to your users and maximizing revenue for you. It is recommended that you select all ad units to maximize revenue for your placements.\n\n\nPayments\n\n\nPayment information must be filled out before getting paid. Navigate to the Payments section of the dashboard and click on the settings icon above the table to edit or update your payment information. \n\n\nPayments are paid out by either Paypal or a Wire transfer. Contact your account manager if you would like to receive payments by Wire.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#adding-an-application", 
            "text": "You can add a new application by clicking the plus button in either the Analytics or My Applications sections.    Copy and paste the tvOS, Android TV, or Amazon Fire TV app store URL for your application and all the details of your app will be displayed.     If you want to integrate a virtual currency you can configure\u00a0it in the next tab. First enter your virtual currency name and value. The value of your virtual currency should be the amount per $1 e.g. 100 gems, 2 spins, etc. Then choose whether you would like to have a Client Side or Server Side callback and configure either appropriately.   Next you can choose if you would like to join our Open Marketplace. Our Open Marketplace allows you to gain more users and traction to your app by helping promote other apps. The discovery potential of your app is dependant on how well you promote other apps: the more your users download other apps in the marketplace, the more users you will gain!   Placements  A placement is a specific time or location in your application where you might want to display ColorTV content to your users.  You can find out more specifics about placements and how to incorporate them in your app  here \nIn order to show an ad, you must declare the placement in the ad request inside of your code.", 
            "title": "Adding an Application"
        }, 
        {
            "location": "/#ad-units", 
            "text": "", 
            "title": "Ad units"
        }, 
        {
            "location": "/#discovery-center", 
            "text": "Discovery Center amplifies the finite amount of content in the App Store to provide users with an extended amount of app, video, and brand recommendations. The duel functionality of the Discovery Center helps cater to all types of developers by serving as a free-marketplace to increase your app's reach or a tool for monetization. Our discovery platform uses machine learning to deliver the most relevant suggestions to your users in a non-intrusive manner.  Configure the way you want to utilize the Discovery Center for your apps in the My Applications section of the dashboard by selecting the option to join our open-marketplace or integrate your virtual currency to monetize. If you are using the monetization component, you will be notified by the SDK that the transaction was successful and your users will be credited by either client or server side callbacks.", 
            "title": "Discovery Center"
        }, 
        {
            "location": "/#game-trailer", 
            "text": "Game Trailer gives users an immersive experience with one of our featured applications. Scroll through the assortment of images to get insight to the gameplay and functionality of the app,  description and app ratings further helps users determine whether the app will appeal to them. The Game Trailer unit also supports showing video before to further enhance the user's experience with the app.    Maximize Revenue  In order to maximize monetization, select both Video and Game Trailer for your placement in the My Applications section. This enables a video preview for the app to play before the Game Trailer screen is displayed.", 
            "title": "Game Trailer"
        }, 
        {
            "location": "/#brand-engagement", 
            "text": "Brand Engagement transcends the normal television branded ad by allowing users to interact and engage with the product. By entering either their phone number or email address, users will be connected to a brand representative to find out more about the specific offer. By entering their email, users will be added to a mailing list for the product to get updates and exclusive offers. Entering their phone number will result in a representative calling within a few minutes to provide more information about the product. Brand Engagement also supports showing video before to further enhance the user's experience with the product.    Maximize Revenue  In order to maximize monetization, select both Video and Brand Engagement for your placement in the My Applications section. This will enable a video preview for the product to play before the Brand Engagement screen is displayed.", 
            "title": "Brand Engagement"
        }, 
        {
            "location": "/#video", 
            "text": "The Video unit can be employed in a variety of ways, either as a standalone unit or as a supplement to the Game Trailer and Brand Engagement units. Video ranges from 15 seconds to a minute and can be configured in the My Applications section of the dashboard.", 
            "title": "Video"
        }, 
        {
            "location": "/#placements", 
            "text": "Placements are specific times or locations inside of your app where you can choose to show content to your users. Here is the list of available placements:    Defined Placement Values    AppLaunch  AppResume  AppClose  MainMenu  Pause  StageOpen  StageComplete  StageFailed  LevelUp  BetweenLevels  StoreOpen  InAppPurchase  AbandonInAppPurchase  VirtualGoodPurchased  UserHighScore  OutofGoods  OutofEnergy  InsufficientCurrency  FinishedTutorial   By setting up placements inside your app, you will have the ability to control what type of ad units are being shown at specific locations in your app in real-time server side. In addition to added control, our machine learning algorithm optimizes the best performing ad units for specific times: Making more relevant content displayed to your users and maximizing revenue for you. It is recommended that you select all ad units to maximize revenue for your placements.", 
            "title": "Placements"
        }, 
        {
            "location": "/#payments", 
            "text": "Payment information must be filled out before getting paid. Navigate to the Payments section of the dashboard and click on the settings icon above the table to edit or update your payment information.   Payments are paid out by either Paypal or a Wire transfer. Contact your account manager if you would like to receive payments by Wire.", 
            "title": "Payments"
        }, 
        {
            "location": "/tvOsSdk/", 
            "text": "ColorTV tvOS SDK\n\n\nGetting started\n\n\nBefore getting started make sure you have: \n\n\n\n\n\n\nAdded your app in the My Applications section of the Color Dashboard. You need to do this so that you can get your App ID that you'll be adding to your app with our SDK.\n\n\n\n\n\n\nOur newest tvOS SDK supports the newest Xcode (7.2). Please ensure you are using Xcode (7.2) or higher to ensure smooth integration.\n\n\n\n\n\n\n\n\nAdding tvOS SDK\n\n\nConnecting Your App\n\n\nThere are two ways to add Color to your Xcode project:\n\n\n1. Cocoapods\n\n\nEasily add Color to your project by adding the following code to your Podfile:\n\n\npod 'Color-tvOS-SDK'\n\n\n\n\nAfter adding this value, run \npod install\n and the latest version of our tvOS SDk will be installed!\n\n\n2. Manual Integration\n\n\nDownload the tvOS SDK here\n\n\nDownload \n Unzip SDK\n\n\nUnzip and open the folder, then navigate to the ColorTV framework folder. Included are both frameworks for simulator and actual devices. Use the framework from the tvos-device folder for production, \nonly\n use the framework for simulator for testing. \n\n\nClick on your Application at the top-left side of Xcode and go to project settings. Select \nGeneral\n and choose proper target, the name in most cases corresponds to name of your project. Then drag and drop the COLORAdFramework.framework directory into the \nEmbeded Binaries\n section.\n\n\n\n\nOnce complete, you will see the COLORAdFramework in both the \nEmbedded Binaries and Linked Frameworks and Libraries\n sections. Please note that the framework will be automatically added to \nLinked Frameworks and Libraries\n. It will \nnot\n be automatically added to both if you add it to Linked Frameworks and Libraries first.\n\n\n\n\n\n\nInitializing SDK\n\n\nOpen AppDelegate.m and modify body of function \napplication:DidFinishLaunchingWithOptions:\n with the App ID generated in the dashboard\n\n\n[[COLORAdController sharedAdController] startWithAppIdentifier:@\nYOUR_APP_ID_HERE\n];\n\n\n\n\nCOLORAdController.sharedAdController().startWithAppIdentifier(\nYOUR_APP_ID_HERE\n);\n\n\n\n\nRemember to import COLORAdFramework module. Add following line of code above class implementation.\n\n\n@import COLORAdFramework;\n\n\n\n\n@import COLORAdFramework\n\n\n\n\n\n\nDisplaying ads\n\n\nColorTV offers lot of different types of advertisement which are automatically provided by our server in\u00a0order to attract you audience. You do not need to care about proper ad and its content, we optimize the best performing content for all of your users. All you need to do is to add a few lines of code and an ad will be displayed wherever and whenever you want.\n\n\n    [[COLORAdController sharedAdController] adViewControllerForPlacement:COLORAdFrameworkPlacementAppLaunch withCompletion:^(COLORAdViewController * _Nullable vc, NSError * _Nullable error) {\n        if(vc) {\n\n            vc.adCompleted = ^{\n                dispatch_async(dispatch_get_main_queue(), ^{\n                    [self dismissViewControllerAnimated:YES completion:nil];\n                });\n            };\n\n            dispatch_async(dispatch_get_main_queue(), ^{\n                [self presentViewController:vc animated:YES completion:^{\n\n                }];\n            });\n        } else {\n            NSLog(@\nError: %@\n, error);\n        }        \n    }];\n\n\n\n\n    COLORAdController.sharedAdController().adViewControllerForPlacement(placement, withCompletion:{ (vc , error) in\n            guard let vc = vc else {\n                print(\nFailed to initialize ad view controller, error: \\(error?.description)\n)\n                return\n            }\n\n            vc.adCompleted = {\n                self.dismissViewControllerAnimated(true, completion: nil)\n            }\n\n            dispatch_async(dispatch_get_main_queue()) {\n                self.presentViewController(vc, animated: true, completion: nil)\n            }\n        })\n\n\n\n\nWe understand how imporant user experience is to your app's performance. Nobody wants to wait a few seconds to see an advertisement regardless how relevant it's content is, so we developed the method \nadViewControllerWithCompletion\n for optimal performance. Call \nadViewControllerWithCompletion\n whenever you think an ad is likely to be shown. We highly reccommend invoking this method in all potential places you will show an ad. By doing this you can decide to either stop or start showing ads at specific placements in your app via our dashboard without pushing updates to your users! \n\n\nCompletion block is called when some elements of ad are loaded. It provides you two arguments, \nviewController\n and \nerror\n. The framework generates \nviewController\n which is to be displayed in the manner which matches your application's structure. In most cases modal view controller is OK but sometimes navigation view controller or some kind if embedded view controller will be better. It is up to you.\n\n\nWhen the ad should no longer be displayed you will be informed and need to define completion block. In the example above that controller is simply dismissed from screen.\n\n\nPlease note that majority of operations are done on the background threads while interactions with User Interface are only made on the main thread. Remember to use \n[NSThread mainThread]\n (old style) or main queue from GCD (new style) when interacting with UI.\n\n\n\n\nPlacements\n\n\nWhen showing an ad you must provide the context inside your app where you are showing the ad. It will allow us to target ads more effectively and give you the ability to control the ads shown in the dashboard.\n\n\n[[COLORAdController sharedAdController] setCurrentPlacement:COLORAdFrameworkPlacementStageOpen];\n\n\n\n\nCOLORAdController.sharedAdController().currentPlacement = COLORAdFrameworkPlacementMainMenu\n\n\n\n\nThe predefined values available as constants whose names start with COLORAdFrameworkPlacement... \n\n\n\n\nUser Profile\n\n\nAnother way to provide valuable information which allows us to provide suitable ads to your audience is user profile. You can provide basic information which characterise specific user by setting properties of \nCOLORUserProfile\n Singleton. If for some reason you believe that user of your application has changed, e.g. account is switched call \n-(void)reset\n method and set new values.\nProperty \nage\n is an unsigned integer which represent number of years elapsed since user was born. If you do not know exact value but you are able to predict age range pass number in the middle of predicted range.\nProperty \ngender\n is a string literal which should contain \nmale\n of \nfemale\n.\nAdditionally set of keywords may be added in order to let us know something more about user of your app. You can manipulate keywords by calling methods \n-(void)addKeyword:(NSString*)keyword\n and \n-(void)removeKeyword:(NSString*)keyword\n. If profile is reseted collection of keywords becomes empty.\n\n\nCOLORUserProfile *profile = [COLORUserProfile sharedProfile];\n\n[profile reset]; //reset current profile if user is switched in your application.\n\nprofile.age = 30;\nprofile.gender = @\nfemale\n; //male or female are expected here\n\n//keywords which may characterize your audience. They are used to target ads more effectively.\n[profile addKeyword:@\naviation\n];\n[profile addKeyword:@\nairplane\n];\n[profile addKeyword:@\nairport\n];\n\n\n\n\n    let profile = COLORUserProfile.sharedProfile()\n    profile.reset() //reset current profile if user is switched in your application.\n\n    profile.age = 30\n    profile.gender = \nfemale\n //male or female are expected here\n\n    //keywords which may characterize your audience. They are used to target ads more effectively.\n    profile.addKeyword(\naviation\n)\n    profile.addKeyword(\nairplane\n)\n    profile.addKeyword(\nairport\n)\n\n\n\n\n\n\nEarning Virtual Currency\n\n\nIntegrating virtual currency inside of your advertisments greatly increases user interaction as well as monetization for your app. We offer a mechanism to provide users a variety of incentives using your app's virtual currency. Virtual Currency must first be set up in the dashboard for your application and then a few lines of code need to be added to be fully setup.\n\n\nAd conversions are monitored by our server and you will be informed when some currency is assigned. It is up to you whether you prefer to get the notification through NSNotificationCenter or use delegate pattern.\n\n\nNSNotificationCenter\n\n\n[[NSNotificationCenter defaultCenter] addObserverForName:COLORAdFrameworkNotificationDidGetCurrency object:nil queue:nil usingBlock:^(NSNotification * _Nonnull note) {\n    NSLog(@\nuserInfo: %@\n, note);\n}];\n\n\n\n\nNSNotificationCenter.defaultCenter().addObserverForName(COLORAdFrameworkNotificationDidGetCurrency, object: nil, queue: nil) { note in\n    print(\nuserInfo: \\(note.userInfo)\n)\n}\n\n\n\n\nEach time a conversion is registered (usually when application returns to foreground) a notification will be triggered for each conversion. Note is an object of class NSNotification which contains property userInfo of class NSDictionary. It contains some useful information like amount of currency to be assigned or name of the currency.\n\n\nDelegate\n\n\nIf you prefer to use delegates please remember to set desired class as compliant to COLORAdControllerDelegate protocol. Then set the delegate.\n\n\n[COLORAdController sharedAdController].delegate = self;\n\n\n\n\nCOLORAdController.sharedAdController().delegate = self\n\n\n\n\nWhenever a conversion is registered, the following method is to be called. Details contains the same information as userInfo.\n\n\n#pragma mark - COLORAdControllerDelegate\n\n-(void)didGetCurrency:(NSDictionary *)details {\n    NSLog(@\ndidGetcurrency delegate method: %@\n, details);\n}\n\n\n\n\nfunc didGetCurrency(details: [NSObject : AnyObject]!) {\n    print(\ndidGetCurrency delegate method: \\(details)\n)\n}", 
            "title": "TVOS SDK"
        }, 
        {
            "location": "/tvOsSdk/#colortv-tvos-sdk", 
            "text": "", 
            "title": "ColorTV tvOS SDK"
        }, 
        {
            "location": "/tvOsSdk/#getting-started", 
            "text": "Before getting started make sure you have:     Added your app in the My Applications section of the Color Dashboard. You need to do this so that you can get your App ID that you'll be adding to your app with our SDK.    Our newest tvOS SDK supports the newest Xcode (7.2). Please ensure you are using Xcode (7.2) or higher to ensure smooth integration.", 
            "title": "Getting started"
        }, 
        {
            "location": "/tvOsSdk/#adding-tvos-sdk", 
            "text": "", 
            "title": "Adding tvOS SDK"
        }, 
        {
            "location": "/tvOsSdk/#connecting-your-app", 
            "text": "There are two ways to add Color to your Xcode project:", 
            "title": "Connecting Your App"
        }, 
        {
            "location": "/tvOsSdk/#1-cocoapods", 
            "text": "Easily add Color to your project by adding the following code to your Podfile:  pod 'Color-tvOS-SDK'  After adding this value, run  pod install  and the latest version of our tvOS SDk will be installed!", 
            "title": "1. Cocoapods"
        }, 
        {
            "location": "/tvOsSdk/#2-manual-integration", 
            "text": "Download the tvOS SDK here", 
            "title": "2. Manual Integration"
        }, 
        {
            "location": "/tvOsSdk/#download-unzip-sdk", 
            "text": "Unzip and open the folder, then navigate to the ColorTV framework folder. Included are both frameworks for simulator and actual devices. Use the framework from the tvos-device folder for production,  only  use the framework for simulator for testing.   Click on your Application at the top-left side of Xcode and go to project settings. Select  General  and choose proper target, the name in most cases corresponds to name of your project. Then drag and drop the COLORAdFramework.framework directory into the  Embeded Binaries  section.   Once complete, you will see the COLORAdFramework in both the  Embedded Binaries and Linked Frameworks and Libraries  sections. Please note that the framework will be automatically added to  Linked Frameworks and Libraries . It will  not  be automatically added to both if you add it to Linked Frameworks and Libraries first.", 
            "title": "Download &amp; Unzip SDK"
        }, 
        {
            "location": "/tvOsSdk/#initializing-sdk", 
            "text": "Open AppDelegate.m and modify body of function  application:DidFinishLaunchingWithOptions:  with the App ID generated in the dashboard  [[COLORAdController sharedAdController] startWithAppIdentifier:@ YOUR_APP_ID_HERE ];  COLORAdController.sharedAdController().startWithAppIdentifier( YOUR_APP_ID_HERE );  Remember to import COLORAdFramework module. Add following line of code above class implementation.  @import COLORAdFramework;  @import COLORAdFramework", 
            "title": "Initializing SDK"
        }, 
        {
            "location": "/tvOsSdk/#displaying-ads", 
            "text": "ColorTV offers lot of different types of advertisement which are automatically provided by our server in\u00a0order to attract you audience. You do not need to care about proper ad and its content, we optimize the best performing content for all of your users. All you need to do is to add a few lines of code and an ad will be displayed wherever and whenever you want.      [[COLORAdController sharedAdController] adViewControllerForPlacement:COLORAdFrameworkPlacementAppLaunch withCompletion:^(COLORAdViewController * _Nullable vc, NSError * _Nullable error) {\n        if(vc) {\n\n            vc.adCompleted = ^{\n                dispatch_async(dispatch_get_main_queue(), ^{\n                    [self dismissViewControllerAnimated:YES completion:nil];\n                });\n            };\n\n            dispatch_async(dispatch_get_main_queue(), ^{\n                [self presentViewController:vc animated:YES completion:^{\n\n                }];\n            });\n        } else {\n            NSLog(@ Error: %@ , error);\n        }        \n    }];      COLORAdController.sharedAdController().adViewControllerForPlacement(placement, withCompletion:{ (vc , error) in\n            guard let vc = vc else {\n                print( Failed to initialize ad view controller, error: \\(error?.description) )\n                return\n            }\n\n            vc.adCompleted = {\n                self.dismissViewControllerAnimated(true, completion: nil)\n            }\n\n            dispatch_async(dispatch_get_main_queue()) {\n                self.presentViewController(vc, animated: true, completion: nil)\n            }\n        })  We understand how imporant user experience is to your app's performance. Nobody wants to wait a few seconds to see an advertisement regardless how relevant it's content is, so we developed the method  adViewControllerWithCompletion  for optimal performance. Call  adViewControllerWithCompletion  whenever you think an ad is likely to be shown. We highly reccommend invoking this method in all potential places you will show an ad. By doing this you can decide to either stop or start showing ads at specific placements in your app via our dashboard without pushing updates to your users!   Completion block is called when some elements of ad are loaded. It provides you two arguments,  viewController  and  error . The framework generates  viewController  which is to be displayed in the manner which matches your application's structure. In most cases modal view controller is OK but sometimes navigation view controller or some kind if embedded view controller will be better. It is up to you.  When the ad should no longer be displayed you will be informed and need to define completion block. In the example above that controller is simply dismissed from screen.  Please note that majority of operations are done on the background threads while interactions with User Interface are only made on the main thread. Remember to use  [NSThread mainThread]  (old style) or main queue from GCD (new style) when interacting with UI.", 
            "title": "Displaying ads"
        }, 
        {
            "location": "/tvOsSdk/#placements", 
            "text": "When showing an ad you must provide the context inside your app where you are showing the ad. It will allow us to target ads more effectively and give you the ability to control the ads shown in the dashboard.  [[COLORAdController sharedAdController] setCurrentPlacement:COLORAdFrameworkPlacementStageOpen];  COLORAdController.sharedAdController().currentPlacement = COLORAdFrameworkPlacementMainMenu  The predefined values available as constants whose names start with COLORAdFrameworkPlacement...", 
            "title": "Placements"
        }, 
        {
            "location": "/tvOsSdk/#user-profile", 
            "text": "Another way to provide valuable information which allows us to provide suitable ads to your audience is user profile. You can provide basic information which characterise specific user by setting properties of  COLORUserProfile  Singleton. If for some reason you believe that user of your application has changed, e.g. account is switched call  -(void)reset  method and set new values.\nProperty  age  is an unsigned integer which represent number of years elapsed since user was born. If you do not know exact value but you are able to predict age range pass number in the middle of predicted range.\nProperty  gender  is a string literal which should contain  male  of  female .\nAdditionally set of keywords may be added in order to let us know something more about user of your app. You can manipulate keywords by calling methods  -(void)addKeyword:(NSString*)keyword  and  -(void)removeKeyword:(NSString*)keyword . If profile is reseted collection of keywords becomes empty.  COLORUserProfile *profile = [COLORUserProfile sharedProfile];\n\n[profile reset]; //reset current profile if user is switched in your application.\n\nprofile.age = 30;\nprofile.gender = @ female ; //male or female are expected here\n\n//keywords which may characterize your audience. They are used to target ads more effectively.\n[profile addKeyword:@ aviation ];\n[profile addKeyword:@ airplane ];\n[profile addKeyword:@ airport ];      let profile = COLORUserProfile.sharedProfile()\n    profile.reset() //reset current profile if user is switched in your application.\n\n    profile.age = 30\n    profile.gender =  female  //male or female are expected here\n\n    //keywords which may characterize your audience. They are used to target ads more effectively.\n    profile.addKeyword( aviation )\n    profile.addKeyword( airplane )\n    profile.addKeyword( airport )", 
            "title": "User Profile"
        }, 
        {
            "location": "/tvOsSdk/#earning-virtual-currency", 
            "text": "Integrating virtual currency inside of your advertisments greatly increases user interaction as well as monetization for your app. We offer a mechanism to provide users a variety of incentives using your app's virtual currency. Virtual Currency must first be set up in the dashboard for your application and then a few lines of code need to be added to be fully setup.  Ad conversions are monitored by our server and you will be informed when some currency is assigned. It is up to you whether you prefer to get the notification through NSNotificationCenter or use delegate pattern.", 
            "title": "Earning Virtual Currency"
        }, 
        {
            "location": "/tvOsSdk/#nsnotificationcenter", 
            "text": "[[NSNotificationCenter defaultCenter] addObserverForName:COLORAdFrameworkNotificationDidGetCurrency object:nil queue:nil usingBlock:^(NSNotification * _Nonnull note) {\n    NSLog(@ userInfo: %@ , note);\n}];  NSNotificationCenter.defaultCenter().addObserverForName(COLORAdFrameworkNotificationDidGetCurrency, object: nil, queue: nil) { note in\n    print( userInfo: \\(note.userInfo) )\n}  Each time a conversion is registered (usually when application returns to foreground) a notification will be triggered for each conversion. Note is an object of class NSNotification which contains property userInfo of class NSDictionary. It contains some useful information like amount of currency to be assigned or name of the currency.", 
            "title": "NSNotificationCenter"
        }, 
        {
            "location": "/tvOsSdk/#delegate", 
            "text": "If you prefer to use delegates please remember to set desired class as compliant to COLORAdControllerDelegate protocol. Then set the delegate.  [COLORAdController sharedAdController].delegate = self;  COLORAdController.sharedAdController().delegate = self  Whenever a conversion is registered, the following method is to be called. Details contains the same information as userInfo.  #pragma mark - COLORAdControllerDelegate\n\n-(void)didGetCurrency:(NSDictionary *)details {\n    NSLog(@ didGetcurrency delegate method: %@ , details);\n}  func didGetCurrency(details: [NSObject : AnyObject]!) {\n    print( didGetCurrency delegate method: \\(details) )\n}", 
            "title": "Delegate"
        }, 
        {
            "location": "/unityTVOS/", 
            "text": "Getting started\n\n\nThe ColorTV Unity Plugin is a light-weight plugin to provide functionality of the ColorTV SDK with Unity3D apps.\n\n\nBefore getting started make sure you have: \n\n\n\n\n\n\nAdded your app in the My Applications section of the Color Dashboard. You need to do this so that you can get your App ID that you'll be adding to your app with our SDK.\n\n\n\n\n\n\nUpdated to the newest version of Unity. Current guide is prepared for Unity 5.3.4p1\n\n\n\n\n\n\nAdding Apple TV Unity Plugin\n\n\n\n\nDownload Unity Plugin\n\n\nDownload the Apple TV Unity3d SDK here\n\n\n\n\nUnpacking the unitypackage\n\n\nAfter you download the \nColorTvSDKUnityPlugin-\nversion\n.unitypackage\n, double click it to unpack it to your project. You will be prompted with a checklist of all the files within the package:\n\n\n\n\nIntegrating the plugin to your game\n\n\nTo integrate our plugin into your game you first need to use the \nColorTvPlugin\n namespace in every script that will invoke ColorTv SDK methods:\n\n\nusing ColorTvPlugin;\n\n\n\n\nThen you need to call the \nColorTv.Init (\"AppId\")\n method, preferably in your game's first scene's \nStart ()\n method:\n\n\nvoid Start ()\n{\n    ColorTv.Init (\nAppId\n);\n}\n\n\n\n\nIf you're using both tvOS and Android platforms then you'll need to do a platform-specific initialization:\n\n\nvoid Start ()\n{\n    #if !UNITY_EDITOR \n UNITY_ANDROID\n    ColorTv.Init (\nAndroidAppId\n);\n    #elif !UNITY_EDITOR \n UNITY_TVOS\n    ColorTv.Init (\nAppleTVAppId\n);\n    #endif\n}\n\n\n\n\nYou can also enable debug mode to receive more verbose logging by calling:\n\n\nColorTv.SetDebugMode (true);\n\n\n\n\nTo get callbacks about the ad status, you need to create the following delegates:\n\n\npublic void OnAdLoaded (string placementId)\n{\n  Debug.Log (\nAd is available for placement: \n + placementId);\n}\n\npublic void OnAdClosed (string placementId)\n{\n  Debug.Log (\nAd has been closed for placement: \n + placementId);\n}\n\npublic void OnError (ColorTvError error)\n{\n  Debug.Log (\nAd error occured for placement: \n + error.PlacementId + \n, with error code: \n + error.ErrorCode + \n and error message: \n + error.ErrorMessage);\n}\n\npublic void OnAdExpired (string placementId)\n{\n  Debug.Log (\nAd has expired for placement: \n + placementId);\n}\n\n\n\n\nThen you need to register the delegates by using the ColorTvCallbacks class members:\n\n\nColorTvCallbacks.AdLoaded += OnAdLoaded;\nColorTvCallbacks.AdClosed += OnAdClosed;\nColorTvCallbacks.AdError += OnError;\nColorTvCallbacks.AdExpired += OnAdExpired;\n\n\n\n\nTo load an ad for a certain placement, you need to call the following method:\n\n\nColorTv.LoadAd (AdPlacement.LEVEL_UP);\n\n\n\n\nUse one of the predefined placements that you can find in \nAdPlacement\n class, e.g. \nAdPlacement.LEVEL_UP\n.\n\n\nTo show an ad for a certain placement, you need to call the following method:\n\n\nColorTv.ShowAd (AdPlacement.LEVEL_UP);\n\n\n\n\nCalling this method will show an ad for the placement you pass. Make sure you get the \nAdLoaded\n callback first, otherwise the ad won't be ready to be played.\n\n\nRegistering currency earned listener\n\n\nIn order to reward the user, you have to create a delegate method in one of your scripts:\n\n\npublic void OnCurrencyEarnedListener (Currency reward)\n{\n  Debug.Log (\nUser has been awarded for placement \n + reward.Placement + \n: \n + reward.Amount + \n x \n + reward.Type);\n}\n\n\n\n\nAnd then register the delegate by calling:\n\n\nColorTvCallbacks.CurrencyEarned += OnCurrencyEarnedListener;\n\n\n\n\nNow you will be notified when the user earns virtual currency.\n\n\nCurrency for user\n\n\nIn order to distribute currency to the same user but on other device, use below:\n\n\nColorTv.SetUserId (\nuser123\n);\n\n\n\n\nUser profile\n\n\nTo improve ad targeting you can use methods in ColorTv class that set the user profile.\n\n\nYou can set age, gender and some keywords as comma-separated values, eg. \nsport,health\n like so:\n\n\nColorTv.SetUserAge(24);\nColorTv.SetUserGender(ColorTv.Gender.FEMALE);\nColorTv.SetUserKeywords(\nsport,health\n);\n\n\n\n\nThese values will automatically be saved and attached to an ad request.\n\n\n\n\nIf you're already using XUPorter make sure you exclude the \nAssets/ColorTv/Editor/ColorTV.projmods\n, which will add unnecessary framework to your iOS build.\n\n\n\n\nKnown issues\n\n\nThe Apple TV remote's menu button behaves strangely when used to dismiss an ad. The click is received and propagated to Unity, even though it is in a \"paused\" state. If that issue occurs in your game, a workaround would be to go to \nEdit-\nProject Settings-\nInput\n and remove \njoystick button 0\n from the \nSubmit\n action.", 
            "title": "UNITY TVOS"
        }, 
        {
            "location": "/unityTVOS/#getting-started", 
            "text": "The ColorTV Unity Plugin is a light-weight plugin to provide functionality of the ColorTV SDK with Unity3D apps.  Before getting started make sure you have:     Added your app in the My Applications section of the Color Dashboard. You need to do this so that you can get your App ID that you'll be adding to your app with our SDK.    Updated to the newest version of Unity. Current guide is prepared for Unity 5.3.4p1", 
            "title": "Getting started"
        }, 
        {
            "location": "/unityTVOS/#adding-apple-tv-unity-plugin", 
            "text": "Download Unity Plugin  Download the Apple TV Unity3d SDK here", 
            "title": "Adding Apple TV Unity Plugin"
        }, 
        {
            "location": "/unityTVOS/#unpacking-the-unitypackage", 
            "text": "After you download the  ColorTvSDKUnityPlugin- version .unitypackage , double click it to unpack it to your project. You will be prompted with a checklist of all the files within the package:", 
            "title": "Unpacking the unitypackage"
        }, 
        {
            "location": "/unityTVOS/#integrating-the-plugin-to-your-game", 
            "text": "To integrate our plugin into your game you first need to use the  ColorTvPlugin  namespace in every script that will invoke ColorTv SDK methods:  using ColorTvPlugin;  Then you need to call the  ColorTv.Init (\"AppId\")  method, preferably in your game's first scene's  Start ()  method:  void Start ()\n{\n    ColorTv.Init ( AppId );\n}  If you're using both tvOS and Android platforms then you'll need to do a platform-specific initialization:  void Start ()\n{\n    #if !UNITY_EDITOR   UNITY_ANDROID\n    ColorTv.Init ( AndroidAppId );\n    #elif !UNITY_EDITOR   UNITY_TVOS\n    ColorTv.Init ( AppleTVAppId );\n    #endif\n}  You can also enable debug mode to receive more verbose logging by calling:  ColorTv.SetDebugMode (true);  To get callbacks about the ad status, you need to create the following delegates:  public void OnAdLoaded (string placementId)\n{\n  Debug.Log ( Ad is available for placement:   + placementId);\n}\n\npublic void OnAdClosed (string placementId)\n{\n  Debug.Log ( Ad has been closed for placement:   + placementId);\n}\n\npublic void OnError (ColorTvError error)\n{\n  Debug.Log ( Ad error occured for placement:   + error.PlacementId +  , with error code:   + error.ErrorCode +   and error message:   + error.ErrorMessage);\n}\n\npublic void OnAdExpired (string placementId)\n{\n  Debug.Log ( Ad has expired for placement:   + placementId);\n}  Then you need to register the delegates by using the ColorTvCallbacks class members:  ColorTvCallbacks.AdLoaded += OnAdLoaded;\nColorTvCallbacks.AdClosed += OnAdClosed;\nColorTvCallbacks.AdError += OnError;\nColorTvCallbacks.AdExpired += OnAdExpired;  To load an ad for a certain placement, you need to call the following method:  ColorTv.LoadAd (AdPlacement.LEVEL_UP);  Use one of the predefined placements that you can find in  AdPlacement  class, e.g.  AdPlacement.LEVEL_UP .  To show an ad for a certain placement, you need to call the following method:  ColorTv.ShowAd (AdPlacement.LEVEL_UP);  Calling this method will show an ad for the placement you pass. Make sure you get the  AdLoaded  callback first, otherwise the ad won't be ready to be played.", 
            "title": "Integrating the plugin to your game"
        }, 
        {
            "location": "/unityTVOS/#registering-currency-earned-listener", 
            "text": "In order to reward the user, you have to create a delegate method in one of your scripts:  public void OnCurrencyEarnedListener (Currency reward)\n{\n  Debug.Log ( User has been awarded for placement   + reward.Placement +  :   + reward.Amount +   x   + reward.Type);\n}  And then register the delegate by calling:  ColorTvCallbacks.CurrencyEarned += OnCurrencyEarnedListener;  Now you will be notified when the user earns virtual currency.", 
            "title": "Registering currency earned listener"
        }, 
        {
            "location": "/unityTVOS/#currency-for-user", 
            "text": "In order to distribute currency to the same user but on other device, use below:  ColorTv.SetUserId ( user123 );", 
            "title": "Currency for user"
        }, 
        {
            "location": "/unityTVOS/#user-profile", 
            "text": "To improve ad targeting you can use methods in ColorTv class that set the user profile.  You can set age, gender and some keywords as comma-separated values, eg.  sport,health  like so:  ColorTv.SetUserAge(24);\nColorTv.SetUserGender(ColorTv.Gender.FEMALE);\nColorTv.SetUserKeywords( sport,health );  These values will automatically be saved and attached to an ad request.   If you're already using XUPorter make sure you exclude the  Assets/ColorTv/Editor/ColorTV.projmods , which will add unnecessary framework to your iOS build.", 
            "title": "User profile"
        }, 
        {
            "location": "/unityTVOS/#known-issues", 
            "text": "The Apple TV remote's menu button behaves strangely when used to dismiss an ad. The click is received and propagated to Unity, even though it is in a \"paused\" state. If that issue occurs in your game, a workaround would be to go to  Edit- Project Settings- Input  and remove  joystick button 0  from the  Submit  action.", 
            "title": "Known issues"
        }, 
        {
            "location": "/androidTVSDK/", 
            "text": "Getting Started\n\n\nBefore getting started make sure you have: \n\n\n\n\n\n\nAdded your app in the My Applications section of the Color Dashboard. You need to do this so that you can get your App ID that you'll be adding to your app with our SDK.\n\n\n\n\n\n\nMake sure your Android Studio version is up to date and that your application is targeting \nminSdkVersion:14\n\n\n\n\n\n\n\n\nOur SDK supports Android versions 21+, but for convenience in maintaining one app for multiple platforms we've lowered the \nminSdkVersion\n to 14. ColorTv SDK will not be initialized however on versions below 21.\n\n\n\n\nAdding Android TV/Amazon Fire TV SDK\n\n\nFor a demo of the correct integration, please refer to our \ndemo application\n\n\nConnecting Your App\n\n\nIn your project's \nbuild.gradle\n make sure you are using ColorTV Bintray repository:\n\n\nrepositories {\n    maven {\n        url  \nhttp://colortv.bintray.com/maven\n\n    }\n}\n\n\n\n\nThen add the following dependencies in your app's \nbuild.gradle\n file in Android Studio: \n\n\ndependencies {\n    compile 'com.colortv:android-sdk:1.4.0'\n    compile 'com.google.android.gms:play-services-ads:8.4.0'\n    compile 'com.android.support:recyclerview-v7:23.3.0'\n}\n\n\n\n\nDoing this prevents you from having to download our SDK and adding it manually to your project, as the aar file will handle that for you.\n\n\nInitializing the SDK\n\n\nImport the SDK to your \nMainActivity.java\n file.\n\n\nimport com.colortv.android.ColorTvSdk;\n\n\n\n\nSetup the ColorTvSDK for your app by invoking \nColorTvSdk\n initialization method below in your code. \n\n\nColorTvSdk.init(this, \nyour_app_id_from_dashboard\n);\n\n\n\n\nYour app id is generated in the publisher dashboard after adding or editing an application in the My Applications section. Copy the app id and paste the value for \"your_app_id_from_dashboard\".\n\n\n\n\nWe recommend putting the initialization method inside either \nApplication.onCreate()\n or \nMainActivity.onCreate() \n. The application must be initialized before invoking any functions of the SDK.\n\n\n\n\nDisplaying Ads\n\n\nAds may be shown wherever you place them inside your app, but they \nmust\n include a Placement parameter to indicate the specific location. Placements are used to optimize user experience and analytics. \n\n\nPlacements\n\n\nBelow are all the possible placement values: \n\n\n\n\n\n\nAppLaunch\n\n\n\n\n\n\nAppResume\n\n\n\n\n\n\nAppClose\n\n\n\n\n\n\nMainMenu\n\n\n\n\n\n\nPause\n\n\n\n\n\n\nStageOpen\n\n\n\n\n\n\nStageComplete\n\n\n\n\n\n\nStageFailed\n\n\n\n\n\n\nLevelUp\n\n\n\n\n\n\nBetweenLevels\n\n\n\n\n\n\nStoreOpen\n\n\n\n\n\n\nInAppPurchase\n\n\n\n\n\n\nAbandonInAppPurchase\n\n\n\n\n\n\nVirtualGoodPurchased\n\n\n\n\n\n\nUserHighScore\n\n\n\n\n\n\nOutofGoods\n\n\n\n\n\n\nOutofEnergy\n\n\n\n\n\n\nInsufficientCurrency\n\n\n\n\n\n\nFinishedTutorial\n\n\n\n\n\n\n\n\nYou can choose what ad units you want to show for a specific placement in the dashboard, \nclick to learn more about Ad Units\n\n\n\n\nTo get callbacks about the ad status, you need to create a \nColorTvAdListener\n object by overriding it's methods:\n\n\nColorTvAdListener listener = new ColorTvAdListener() {\n\n    @Override\n    public void onAdLoaded(String placement) {\n        ColorTvSdk.showAd(placement);\n    }\n\n    @Override\n    public void onAdError(String placement, ColorTvError colorTvError) {\n    }\n\n    @Override\n    public void onAdClosed(String placement) {\n    }\n\n    @Override\n    public void onAdExpired(String placement) {\n    }\n};\n\n\n\n\nand register that listener to the SDK:\n\n\nColorTvSdk.registerAdListener(listener);\n\n\n\n\nTo load an ad for a certain placement, you need to call the following method:\n\n\nColorTvSdk.loadAd(AdPlacement.LEVEL_UP);\n\n\n\n\nUse one of the predefined placements that you can find in \nAdPlacement\n class, e.g. \nAdPlacement.LEVEL_UP\n.\n\n\nIn order to show an ad, call the following function: \n\n\nColorTvSdk.showAd(AdPlacement.LEVEL_UP);\n\n\n\n\nCalling this method will show an ad for the placement you pass. Make sure you get the \nadLoaded\n callback first, otherwise the ad won't be played.\n\n\n\n\nIt is recommended to set up multiple placements inside your app to maximize monetization and improve user experience.\n\n\n\n\nDeclaring Session\n\n\nCreating a session is \nnecessary\n for tracking virtual currency transactions and user sessions. Add the following code to every Activity file in your application e.g. \nMainActivity.java\n\n\n// Start Session\n@Override\nprotected void onCreate() {\n  super.onCreate();\n  ColorTvSdk.onCreate();\n}\n\n// End Session\n@Override\nprotected void onDestroy() {\n  super.onDestroy();\n  ColorTvSdk.onDestroy();\n}\n\n\n\n\nEarning Virtual Currency\n\n\nA listener must be added in order to receive events when a virtual currency transaction has occurred. \n\n\nprivate OnCurrencyEarnedListener listener = new OnCurrencyEarnedListener() {\n    @Override\n    public void onCurrencyEarned(String placement, int currencyAmount, String currencyType){\n\n    }\n};\n\n...\n\nColorTvSdk.addOnCurrencyEarnedListener(listener);\n\n\n\n\nUse the following function to unregister listeners:\n\n\nColorTvSdk.removeOnCurrencyEarnedListener(listener);\n\n\n\n\nUse the following function to cancel all listeners: \n\n\nColorTvSdk.clearOnCurrencyEarnedListeners();\n\n\n\n\n\n\nReminder!\n\n\nSession must also be implemented for virtual currency transactions to function.\n\n\n\n\nCurrency for user\n\n\nIn order to distribute currency to the same user but on other device, use below:\n\n\nColorTvSdk.setUserId(\nuser123\n);\n\n\n\n\nINSTALL_REFERRER Conflict\n\n\nIf any of your \nBroadcastReceiver\n class declared in \nAndroidManifest.xml\n contains Intent Action \nINSTALL_REFERRER\n:\n\n\nreceiver ...\n\n  \nintent-filter\n\n    \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n/\n\n  \n/intent-filter\n\n\n/receiver\n\n\n\n\nAdd the following code to your \nAndroidManifest.xml\n file: \n\n\nreceiver android:name=\ncom.colortv.android.ColorTvBroadcastReceiver\n\n\n\n\nIn your BroadcastReceiver that handles action \ncom.android.vending.INSTALL_REFERRER\n, add Java code:\n\n\nif (intent.getAction().equals(\ncom.android.vending.INSTALL_REFERRER\n)) {\n  final String referrer = intent.getStringExtra(\nreferrer\n);\n  ColorTvSdk.registerReferrer(context, referrer);\n}\n\n\n\n\nUser profile\n\n\nTo improve ad targeting you can use the UserProfile class. To do so, create a new instance of this class:\n\n\nUserProfile user = new UserProfile(context);\n\n\n\n\nYou can set age, gender and some keywords as comma-separated values, eg. \nsport,health\n like so:\n\n\nuser.setAge(24);\nuser.setGender(UserProfile.Gender.FEMALE);\nuser.setKeywords(\nsport,health\n);\n\n\n\n\nThese values will automatically be saved and attached to an ad request.\n\n\nDisabling voice input on phone fields\n\n\nIf you don't want to use the voice input functionality add the following line to your manifest:\n\n\nuses-permission android:name=\nandroid.permission.RECORD_AUDIO\n tools:node=\nremove\n /\n\n\n\n\nand call the following method after the \nColorTvSdk.init()\n:\n\n\nColorTvSdk.setRecordAudioEnabled(false);\n\n\n\n\nSummary\n\n\nAfter completing all previous steps your Activity could look like this:\n\n\nimport com.colortv.android.AdPlacement;\nimport com.colortv.android.ColorTvAdListener;\nimport com.colortv.android.ColorTvError;\nimport com.colortv.android.ColorTvSdk;\nimport com.colortv.android.OnCurrencyEarnedListener;\n\npublic class MainActivity extends Activity {\n\n    private ColorTvAdListener listener = new ColorTvAdListener() {\n\n        @Override\n        public void onAdLoaded(String placement) {\n            ColorTvSdk.showAd(placement);\n        }\n\n        @Override\n        public void onAdError(String placement, ColorTvError colorTvError) {\n\n        }\n\n        @Override\n        public void onAdClosed(String placement) {\n        }\n\n        @Override\n        public void onAdExpired(String placement) {\n        }\n    };\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        ColorTvSdk.setDebugMode(true);\n        ColorTvSdk.init(this, \nyour_app_id\n);\n        ColorTvSdk.registerOnAdStatusChangedListener(listener);\n\n        findViewById(R.id.btnShowAd).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                ColorTvSdk.loadAd(AdPlacement.APP_LAUNCH);\n            }\n        });\n\n        ColorTvSdk.addOnCurrencyEarnedListener(new OnCurrencyEarnedListener() {\n            @Override\n            public void onCurrencyEarned(String placement, int currencyAmount, String currencyType) {\n                Toast.makeText(MainActivity.this, \nReceived \n + currencyAmount + \n \n + currencyType, Toast.LENGTH_LONG).show();\n            }\n        });\n\n        ColorTvSdk.onCreate();\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n\n        ColorTvSdk.onDestroy();\n        ColorTvSdk.clearOnCurrencyEarnedListeners();\n    }\n}", 
            "title": "ANDROID TV / FIRE TV SDK"
        }, 
        {
            "location": "/androidTVSDK/#getting-started", 
            "text": "Before getting started make sure you have:     Added your app in the My Applications section of the Color Dashboard. You need to do this so that you can get your App ID that you'll be adding to your app with our SDK.    Make sure your Android Studio version is up to date and that your application is targeting  minSdkVersion:14     Our SDK supports Android versions 21+, but for convenience in maintaining one app for multiple platforms we've lowered the  minSdkVersion  to 14. ColorTv SDK will not be initialized however on versions below 21.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/androidTVSDK/#adding-android-tvamazon-fire-tv-sdk", 
            "text": "For a demo of the correct integration, please refer to our  demo application", 
            "title": "Adding Android TV/Amazon Fire TV SDK"
        }, 
        {
            "location": "/androidTVSDK/#connecting-your-app", 
            "text": "In your project's  build.gradle  make sure you are using ColorTV Bintray repository:  repositories {\n    maven {\n        url   http://colortv.bintray.com/maven \n    }\n}  Then add the following dependencies in your app's  build.gradle  file in Android Studio:   dependencies {\n    compile 'com.colortv:android-sdk:1.4.0'\n    compile 'com.google.android.gms:play-services-ads:8.4.0'\n    compile 'com.android.support:recyclerview-v7:23.3.0'\n}  Doing this prevents you from having to download our SDK and adding it manually to your project, as the aar file will handle that for you.", 
            "title": "Connecting Your App"
        }, 
        {
            "location": "/androidTVSDK/#initializing-the-sdk", 
            "text": "Import the SDK to your  MainActivity.java  file.  import com.colortv.android.ColorTvSdk;  Setup the ColorTvSDK for your app by invoking  ColorTvSdk  initialization method below in your code.   ColorTvSdk.init(this,  your_app_id_from_dashboard );  Your app id is generated in the publisher dashboard after adding or editing an application in the My Applications section. Copy the app id and paste the value for \"your_app_id_from_dashboard\".   We recommend putting the initialization method inside either  Application.onCreate()  or  MainActivity.onCreate()  . The application must be initialized before invoking any functions of the SDK.", 
            "title": "Initializing the SDK"
        }, 
        {
            "location": "/androidTVSDK/#displaying-ads", 
            "text": "Ads may be shown wherever you place them inside your app, but they  must  include a Placement parameter to indicate the specific location. Placements are used to optimize user experience and analytics.", 
            "title": "Displaying Ads"
        }, 
        {
            "location": "/androidTVSDK/#placements", 
            "text": "Below are all the possible placement values:     AppLaunch    AppResume    AppClose    MainMenu    Pause    StageOpen    StageComplete    StageFailed    LevelUp    BetweenLevels    StoreOpen    InAppPurchase    AbandonInAppPurchase    VirtualGoodPurchased    UserHighScore    OutofGoods    OutofEnergy    InsufficientCurrency    FinishedTutorial     You can choose what ad units you want to show for a specific placement in the dashboard,  click to learn more about Ad Units   To get callbacks about the ad status, you need to create a  ColorTvAdListener  object by overriding it's methods:  ColorTvAdListener listener = new ColorTvAdListener() {\n\n    @Override\n    public void onAdLoaded(String placement) {\n        ColorTvSdk.showAd(placement);\n    }\n\n    @Override\n    public void onAdError(String placement, ColorTvError colorTvError) {\n    }\n\n    @Override\n    public void onAdClosed(String placement) {\n    }\n\n    @Override\n    public void onAdExpired(String placement) {\n    }\n};  and register that listener to the SDK:  ColorTvSdk.registerAdListener(listener);  To load an ad for a certain placement, you need to call the following method:  ColorTvSdk.loadAd(AdPlacement.LEVEL_UP);  Use one of the predefined placements that you can find in  AdPlacement  class, e.g.  AdPlacement.LEVEL_UP .  In order to show an ad, call the following function:   ColorTvSdk.showAd(AdPlacement.LEVEL_UP);  Calling this method will show an ad for the placement you pass. Make sure you get the  adLoaded  callback first, otherwise the ad won't be played.   It is recommended to set up multiple placements inside your app to maximize monetization and improve user experience.", 
            "title": "Placements"
        }, 
        {
            "location": "/androidTVSDK/#declaring-session", 
            "text": "Creating a session is  necessary  for tracking virtual currency transactions and user sessions. Add the following code to every Activity file in your application e.g.  MainActivity.java  // Start Session\n@Override\nprotected void onCreate() {\n  super.onCreate();\n  ColorTvSdk.onCreate();\n}\n\n// End Session\n@Override\nprotected void onDestroy() {\n  super.onDestroy();\n  ColorTvSdk.onDestroy();\n}", 
            "title": "Declaring Session"
        }, 
        {
            "location": "/androidTVSDK/#earning-virtual-currency", 
            "text": "A listener must be added in order to receive events when a virtual currency transaction has occurred.   private OnCurrencyEarnedListener listener = new OnCurrencyEarnedListener() {\n    @Override\n    public void onCurrencyEarned(String placement, int currencyAmount, String currencyType){\n\n    }\n};\n\n...\n\nColorTvSdk.addOnCurrencyEarnedListener(listener);  Use the following function to unregister listeners:  ColorTvSdk.removeOnCurrencyEarnedListener(listener);  Use the following function to cancel all listeners:   ColorTvSdk.clearOnCurrencyEarnedListeners();   Reminder!  Session must also be implemented for virtual currency transactions to function.", 
            "title": "Earning Virtual Currency"
        }, 
        {
            "location": "/androidTVSDK/#currency-for-user", 
            "text": "In order to distribute currency to the same user but on other device, use below:  ColorTvSdk.setUserId( user123 );", 
            "title": "Currency for user"
        }, 
        {
            "location": "/androidTVSDK/#install_referrer-conflict", 
            "text": "If any of your  BroadcastReceiver  class declared in  AndroidManifest.xml  contains Intent Action  INSTALL_REFERRER :  receiver ... \n   intent-filter \n     action android:name= com.android.vending.INSTALL_REFERRER / \n   /intent-filter  /receiver  Add the following code to your  AndroidManifest.xml  file:   receiver android:name= com.colortv.android.ColorTvBroadcastReceiver  In your BroadcastReceiver that handles action  com.android.vending.INSTALL_REFERRER , add Java code:  if (intent.getAction().equals( com.android.vending.INSTALL_REFERRER )) {\n  final String referrer = intent.getStringExtra( referrer );\n  ColorTvSdk.registerReferrer(context, referrer);\n}", 
            "title": "INSTALL_REFERRER Conflict"
        }, 
        {
            "location": "/androidTVSDK/#user-profile", 
            "text": "To improve ad targeting you can use the UserProfile class. To do so, create a new instance of this class:  UserProfile user = new UserProfile(context);  You can set age, gender and some keywords as comma-separated values, eg.  sport,health  like so:  user.setAge(24);\nuser.setGender(UserProfile.Gender.FEMALE);\nuser.setKeywords( sport,health );  These values will automatically be saved and attached to an ad request.", 
            "title": "User profile"
        }, 
        {
            "location": "/androidTVSDK/#disabling-voice-input-on-phone-fields", 
            "text": "If you don't want to use the voice input functionality add the following line to your manifest:  uses-permission android:name= android.permission.RECORD_AUDIO  tools:node= remove  /  and call the following method after the  ColorTvSdk.init() :  ColorTvSdk.setRecordAudioEnabled(false);", 
            "title": "Disabling voice input on phone fields"
        }, 
        {
            "location": "/androidTVSDK/#summary", 
            "text": "After completing all previous steps your Activity could look like this:  import com.colortv.android.AdPlacement;\nimport com.colortv.android.ColorTvAdListener;\nimport com.colortv.android.ColorTvError;\nimport com.colortv.android.ColorTvSdk;\nimport com.colortv.android.OnCurrencyEarnedListener;\n\npublic class MainActivity extends Activity {\n\n    private ColorTvAdListener listener = new ColorTvAdListener() {\n\n        @Override\n        public void onAdLoaded(String placement) {\n            ColorTvSdk.showAd(placement);\n        }\n\n        @Override\n        public void onAdError(String placement, ColorTvError colorTvError) {\n\n        }\n\n        @Override\n        public void onAdClosed(String placement) {\n        }\n\n        @Override\n        public void onAdExpired(String placement) {\n        }\n    };\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        ColorTvSdk.setDebugMode(true);\n        ColorTvSdk.init(this,  your_app_id );\n        ColorTvSdk.registerOnAdStatusChangedListener(listener);\n\n        findViewById(R.id.btnShowAd).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                ColorTvSdk.loadAd(AdPlacement.APP_LAUNCH);\n            }\n        });\n\n        ColorTvSdk.addOnCurrencyEarnedListener(new OnCurrencyEarnedListener() {\n            @Override\n            public void onCurrencyEarned(String placement, int currencyAmount, String currencyType) {\n                Toast.makeText(MainActivity.this,  Received   + currencyAmount +     + currencyType, Toast.LENGTH_LONG).show();\n            }\n        });\n\n        ColorTvSdk.onCreate();\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n\n        ColorTvSdk.onDestroy();\n        ColorTvSdk.clearOnCurrencyEarnedListeners();\n    }\n}", 
            "title": "Summary"
        }, 
        {
            "location": "/unityAndroidTV/", 
            "text": "Getting started\n\n\nThe ColorTV Unity Plugin is a light-weight plugin to provide functionality of the ColorTV SDK with Unity3D apps.\n\n\nBefore getting started make sure you have: \n\n\n\n\n\n\nAdded your app in the My Applications section of the Color Dashboard. You need to do this so that you can get your App ID that you'll be adding to your app with our SDK.\n\n\n\n\n\n\nUpdated to the newest version of Unity. Current guide is prepared for Unity 5.3.4p1\n\n\n\n\n\n\nAdding Android TV Unity Plugin\n\n\n\n\nDownload Unity Plugin\n\n\nDownload the Android TV Unity3d SDK here\n\n\n\n\nUnpacking the unitypackage\n\n\nAfter you download the \nColorTvSDKUnityPlugin-\nversion\n.unitypackage\n, double click it to unpack it to your project. You will be prompted with a checklist of all the files within the package:\n\n\n\n\n\n\nYou may already have the \nandroid-support-v4\n, \nandroid-appcompat-v7\n and \nrecyclerview\n Android libraries in your project. In such case, do not import them.\n\n\n\n\nAfter the asset import is finished, copy the \ngoogle-play-services_lib\n from \nANDROID_HOME/extras/google/google_play_services/libproject/\n into your unity project's \nAssets/Plugins/Android/\n folder.\n\n\nMake sure your project has the \nMinimum API Level\n set to \n14\n or higher:\n\n\n\n\n\n\nOur SDK supports Android versions 21+, but for convenience in maintaining one app for multiple platforms we've lowered the \nminSdkVersion\n to 14. ColorTv SDK will not be initialized however on versions below 21.\n\n\n\n\nIntegrating the plugin to your game\n\n\nTo integrate our plugin into your game you first need to use the \nColorTvPlugin\n namespace in every script that will invoke ColorTv SDK methods:\n\n\nusing ColorTvPlugin;\n\n\n\n\nThen you need to call the \nColorTv.Init (\"AppId\")\n method, preferably in your game's first scene's \nStart ()\n method:\n\n\nvoid Start ()\n{\n    ColorTv.Init (\nAppId\n);\n}\n\n\n\n\nIf you're using both tvOS and Android platforms then you'll need to do a platform-specific initialization:\n\n\nvoid Start ()\n{\n    #if !UNITY_EDITOR \n UNITY_ANDROID\n    ColorTv.Init (\nAndroidAppId\n);\n    #elif !UNITY_EDITOR \n UNITY_TVOS\n    ColorTv.Init (\nAppleTVAppId\n);\n    #endif\n}\n\n\n\n\nYou can also enable debug mode to receive more verbose logging by calling:\n\n\nColorTv.SetDebugMode (true);\n\n\n\n\nTo get callbacks about the ad status, you need to create the following delegates:\n\n\npublic void OnAdLoaded (string placementId)\n{\n  Debug.Log (\nAd is available for placement: \n + placementId);\n}\n\npublic void OnAdClosed (string placementId)\n{\n  Debug.Log (\nAd has been closed for placement: \n + placementId);\n}\n\npublic void OnError (ColorTvError error)\n{\n  Debug.Log (\nAd error occured for placement: \n + error.PlacementId + \n, with error code: \n + error.ErrorCode + \n and error message: \n + error.ErrorMessage);\n}\n\npublic void OnAdExpired (string placementId)\n{\n  Debug.Log (\nAd has expired for placement: \n + placementId);\n}\n\n\n\n\nThen you need to register the delegates by using the ColorTvCallbacks class members:\n\n\nColorTvCallbacks.AdLoaded += OnAdLoaded;\nColorTvCallbacks.AdClosed += OnAdClosed;\nColorTvCallbacks.AdError += OnError;\nColorTvCallbacks.AdExpired += OnAdExpired;\n\n\n\n\nTo load an ad for a certain placement, you need to call the following method:\n\n\nColorTv.LoadAd (AdPlacement.LEVEL_UP);\n\n\n\n\nUse one of the predefined placements that you can find in \nAdPlacement\n class, e.g. \nAdPlacement.LEVEL_UP\n.\n\n\nTo show an ad for a certain placement, you need to call the following method:\n\n\nColorTv.ShowAd (AdPlacement.LEVEL_UP);\n\n\n\n\nCalling this method will show an ad for the placement you pass. Make sure you get the \nAdLoaded\n callback first, otherwise the ad won't be ready to be played.\n\n\nRegistering currency earned listener\n\n\nIn order to reward the user, you have to create a delegate method in one of your scripts:\n\n\npublic void OnCurrencyEarnedListener (Currency reward)\n{\n  Debug.Log (\nUser has been awarded for placement \n + reward.Placement + \n: \n + reward.Amount + \n x \n + reward.Type);\n}\n\n\n\n\nAnd then register the delegate by calling:\n\n\nColorTvCallbacks.CurrencyEarned += OnCurrencyEarnedListener;\n\n\n\n\nNow you will be notified when the user earns virtual currency.\n\n\nCurrency for user\n\n\nIn order to distribute currency to the same user but on other device, use below:\n\n\nColorTv.SetUserId (\nuser123\n);\n\n\n\n\nUser profile\n\n\nTo improve ad targeting you can use methods in ColorTv class that set the user profile.\n\n\nYou can set age, gender and some keywords as comma-separated values, eg. \nsport,health\n like so:\n\n\nColorTv.SetUserAge(24);\nColorTv.SetUserGender(ColorTv.Gender.FEMALE);\nColorTv.SetUserKeywords(\nsport,health\n);\n\n\n\n\nThese values will automatically be saved and attached to an ad request.\n\n\nDisabling voice input on phone fields\n\n\nIf you don't want to use the voice input functionality add the following line to your manifest:\n\n\nuses-permission android:name=\nandroid.permission.RECORD_AUDIO\n tools:node=\nremove\n /\n\n\n\n\nand call the following method after the \nColorTv.Init()\n:\n\n\nColorTv.SetRecordAudioEnabled(false);", 
            "title": "UNITY ANDROID TV / FIRE TV"
        }, 
        {
            "location": "/unityAndroidTV/#getting-started", 
            "text": "The ColorTV Unity Plugin is a light-weight plugin to provide functionality of the ColorTV SDK with Unity3D apps.  Before getting started make sure you have:     Added your app in the My Applications section of the Color Dashboard. You need to do this so that you can get your App ID that you'll be adding to your app with our SDK.    Updated to the newest version of Unity. Current guide is prepared for Unity 5.3.4p1", 
            "title": "Getting started"
        }, 
        {
            "location": "/unityAndroidTV/#adding-android-tv-unity-plugin", 
            "text": "Download Unity Plugin  Download the Android TV Unity3d SDK here", 
            "title": "Adding Android TV Unity Plugin"
        }, 
        {
            "location": "/unityAndroidTV/#unpacking-the-unitypackage", 
            "text": "After you download the  ColorTvSDKUnityPlugin- version .unitypackage , double click it to unpack it to your project. You will be prompted with a checklist of all the files within the package:    You may already have the  android-support-v4 ,  android-appcompat-v7  and  recyclerview  Android libraries in your project. In such case, do not import them.   After the asset import is finished, copy the  google-play-services_lib  from  ANDROID_HOME/extras/google/google_play_services/libproject/  into your unity project's  Assets/Plugins/Android/  folder.  Make sure your project has the  Minimum API Level  set to  14  or higher:    Our SDK supports Android versions 21+, but for convenience in maintaining one app for multiple platforms we've lowered the  minSdkVersion  to 14. ColorTv SDK will not be initialized however on versions below 21.", 
            "title": "Unpacking the unitypackage"
        }, 
        {
            "location": "/unityAndroidTV/#integrating-the-plugin-to-your-game", 
            "text": "To integrate our plugin into your game you first need to use the  ColorTvPlugin  namespace in every script that will invoke ColorTv SDK methods:  using ColorTvPlugin;  Then you need to call the  ColorTv.Init (\"AppId\")  method, preferably in your game's first scene's  Start ()  method:  void Start ()\n{\n    ColorTv.Init ( AppId );\n}  If you're using both tvOS and Android platforms then you'll need to do a platform-specific initialization:  void Start ()\n{\n    #if !UNITY_EDITOR   UNITY_ANDROID\n    ColorTv.Init ( AndroidAppId );\n    #elif !UNITY_EDITOR   UNITY_TVOS\n    ColorTv.Init ( AppleTVAppId );\n    #endif\n}  You can also enable debug mode to receive more verbose logging by calling:  ColorTv.SetDebugMode (true);  To get callbacks about the ad status, you need to create the following delegates:  public void OnAdLoaded (string placementId)\n{\n  Debug.Log ( Ad is available for placement:   + placementId);\n}\n\npublic void OnAdClosed (string placementId)\n{\n  Debug.Log ( Ad has been closed for placement:   + placementId);\n}\n\npublic void OnError (ColorTvError error)\n{\n  Debug.Log ( Ad error occured for placement:   + error.PlacementId +  , with error code:   + error.ErrorCode +   and error message:   + error.ErrorMessage);\n}\n\npublic void OnAdExpired (string placementId)\n{\n  Debug.Log ( Ad has expired for placement:   + placementId);\n}  Then you need to register the delegates by using the ColorTvCallbacks class members:  ColorTvCallbacks.AdLoaded += OnAdLoaded;\nColorTvCallbacks.AdClosed += OnAdClosed;\nColorTvCallbacks.AdError += OnError;\nColorTvCallbacks.AdExpired += OnAdExpired;  To load an ad for a certain placement, you need to call the following method:  ColorTv.LoadAd (AdPlacement.LEVEL_UP);  Use one of the predefined placements that you can find in  AdPlacement  class, e.g.  AdPlacement.LEVEL_UP .  To show an ad for a certain placement, you need to call the following method:  ColorTv.ShowAd (AdPlacement.LEVEL_UP);  Calling this method will show an ad for the placement you pass. Make sure you get the  AdLoaded  callback first, otherwise the ad won't be ready to be played.", 
            "title": "Integrating the plugin to your game"
        }, 
        {
            "location": "/unityAndroidTV/#registering-currency-earned-listener", 
            "text": "In order to reward the user, you have to create a delegate method in one of your scripts:  public void OnCurrencyEarnedListener (Currency reward)\n{\n  Debug.Log ( User has been awarded for placement   + reward.Placement +  :   + reward.Amount +   x   + reward.Type);\n}  And then register the delegate by calling:  ColorTvCallbacks.CurrencyEarned += OnCurrencyEarnedListener;  Now you will be notified when the user earns virtual currency.", 
            "title": "Registering currency earned listener"
        }, 
        {
            "location": "/unityAndroidTV/#currency-for-user", 
            "text": "In order to distribute currency to the same user but on other device, use below:  ColorTv.SetUserId ( user123 );", 
            "title": "Currency for user"
        }, 
        {
            "location": "/unityAndroidTV/#user-profile", 
            "text": "To improve ad targeting you can use methods in ColorTv class that set the user profile.  You can set age, gender and some keywords as comma-separated values, eg.  sport,health  like so:  ColorTv.SetUserAge(24);\nColorTv.SetUserGender(ColorTv.Gender.FEMALE);\nColorTv.SetUserKeywords( sport,health );  These values will automatically be saved and attached to an ad request.", 
            "title": "User profile"
        }, 
        {
            "location": "/unityAndroidTV/#disabling-voice-input-on-phone-fields", 
            "text": "If you don't want to use the voice input functionality add the following line to your manifest:  uses-permission android:name= android.permission.RECORD_AUDIO  tools:node= remove  /  and call the following method after the  ColorTv.Init() :  ColorTv.SetRecordAudioEnabled(false);", 
            "title": "Disabling voice input on phone fields"
        }
    ]
}